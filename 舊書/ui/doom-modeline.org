#+begin_src elisp
  (straight-use-package 'doom-modeline)
  (use-package doom-modeline
    :hook ((after-init . doom-modeline-mode))
    :init (gsetq
           doom-modeline-height                      25
           doom-modeline-bar-width                   3
           doom-modeline-window-width-limit          fill-column
           doom-modeline-project-detection           'project  ;; changed
           doom-modeline-buffer-file-name-style      'relative-to-project  ;; changed
           doom-modeline-icon                        t  ;; changed
           doom-modeline-major-mode-icon             t
           doom-modeline-major-mode-color-icon       t
           doom-modeline-buffer-state-icon           t
           doom-modeline-buffer-modification-icon    t
           doom-modeline-unicode-fallback            t  ;; changed
           doom-modeline-minor-modes                 t
           doom-modeline-enable-word-count           t
           doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode text-mode)
           doom-modeline-buffer-encoding             nil
           doom-modeline-indent-info                 nil
           doom-modeline-checker-simple-format       nil
           doom-modeline-number-limit                99
           doom-modeline-vcs-max-length              12
           doom-modeline-persp-name                  t
           doom-modeline-display-default-persp-name  nil
           doom-modeline-lsp                         t
           doom-modeline-github                      t
           doom-modeline-github-interval             (* 30 60)
           doom-modeline-modal-icon                  nil

           doom-modeline-env-version       t
           doom-modeline-env-enable-python t
           doom-modeline-env-enable-ruby   t
           doom-modeline-env-enable-perl   t
           doom-modeline-env-enable-go     t
           doom-modeline-env-enable-elixir t
           doom-modeline-env-enable-rust   t

           doom-modeline-env-python-executable "python"
           doom-modeline-env-ruby-executable   "ruby"
           doom-modeline-env-perl-executable   "perl"
           doom-modeline-env-go-executable     "go"
           doom-modeline-env-elixir-executable "iex"
           doom-modeline-env-rust-executable   "rustc"

           doom-modeline-env-load-string "..."

           doom-modeline-mu4e        t
           doom-modeline-irc         t
           doom-modeline-irc-stylize 'identity)
    :config
    (doom-modeline-def-segment nasy/time
      "Time"
      (when (doom-modeline--active)
        (propertize
         (format-time-string " %b %d, %Y - %H:%M ")
         'face (when (doom-modeline--active) `(:foreground "#1b335f" :background "#c0ffc2")))))

    ;; Remove
    ;; modals (evil, god, ryo and xah-fly-keys, etc.), parrot
    ;; buffer-encoding
    ;; Add
    ;; nasy/time
    (doom-modeline-def-modeline 'main
      '(bar workspace-name matches buffer-info buffer-position word-count parrot " " selection-info " " misc-info process)
      '(objed-state grip github debug lsp minor-modes major-mode vcs checker nasy/time))

    (doom-modeline-def-modeline 'minimal
      '(bar matches buffer-info-simple)
      '(media-info major-mode "  " nasy/time))

    (doom-modeline-def-modeline 'special
      '(bar modals matches buffer-info buffer-position word-count parrot selection-info)
      '(misc-info battery irc-buffers debug minor-modes input-method indent-info buffer-encoding major-mode process nasy/time))

    (doom-modeline-def-modeline 'media
      '(bar buffer-size buffer-info)
      '(misc-info media-info major-mode process vcs nasy/time))

    (doom-modeline-def-modeline 'pdf
      '(bar buffer-size buffer-info pdf-pages)
      '(misc-info major-mode process vcs nasy/time))

    (doom-modeline-def-modeline 'project
      '(bar buffer-default-directory)
      '(misc-info major-mode nasy/time))

    ;; Change behaviors
    (defun nasy/doom-modeline-update-buffer-file-name (&rest _)
      "Update buffer file name in mode-line."
      (setq doom-modeline--buffer-file-name
            (if buffer-file-name
                (doom-modeline-buffer-file-name)
              (if (string-prefix-p "*Org Src" (format-mode-line "%b"))
                  ""
                (propertize "%b"
                            'face (if (doom-modeline--active)
                                      'doom-modeline-buffer-file
                                    'mode-line-inactive)
                            'help-echo "Buffer name
      mouse-1: Previous buffer\nmouse-3: Next buffer"
                            'local-map mode-line-buffer-identification-keymap)))))
    (advice-add #'doom-modeline-update-buffer-file-name :override #'nasy/doom-modeline-update-buffer-file-name))
#+end_src
