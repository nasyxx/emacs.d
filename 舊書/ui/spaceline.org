#+begin_src elisp
  (use-package spaceline-config
    :disabled t
    :init
    (setq-default
     mode-line-format '("%e" (:eval (spaceline-ml-main)))
     powerline-default-separator 'contour
     powerline-gui-use-vcs-glyph t
     powerline-height 22
     spaceline-highlight-face-func 'spaceline-highlight-face-modified
     spaceline-workspace-numbers-unicode t
     spaceline-window-numbers-unicode t
     spaceline-separator-dir-left '(left . right)
     spaceline-separator-dir-right '(right . left)
     spaceline-flycheck-bullet "❀ %s")
    ;; (spaceline-helm-mode 1)
    (spaceline-info-mode 1)
    :straight spaceline
    :config
    (spaceline-define-segment nasy:version-control
      "Version control information."
      (when vc-mode
        (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
          (powerline-raw
           (s-trim (concat "  "
                           branch
                           (when (buffer-file-name)
                             (pcase (vc-state (buffer-file-name))
                               (`up-to-date " ✓")
                               (`edited " ❓")
                               (`added " ➕")
                               (`unregistered " ■")
                               (`removed " ✘")
                               (`needs-merge " ↓")
                               (`needs-update " ↑")
                               (`ignored " ✦")
                               (_ " ⁇")))))))))

    (spaceline-define-segment nasy-time
      "Time"
      (format-time-string "%b %d, %Y - %H:%M ")
      :tight-right t)

    (spaceline-define-segment flycheck-status
      "An `all-the-icons' representaiton of `flycheck-status'"
      (let* ((text
              (pcase flycheck-last-status-change
                (`finished (if flycheck-current-errors
                               (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
                                              (+ (or .warning 0) (or .error 0)))))
                                 (format "✖ %s Issue%s" count (if (eq 1 count) "" "s")))
                             "✔ No Issues"))
                (`running     "⟲ Running")
                (`no-checker  "⚠")
                (`not-checked "✣ Disabled")
                (`errored     "⚠ Error")
                (`interrupted "⛔ Interrupted")
                (`suspicious  "")))
             (f (cond
                 ((string-match "⚠" text) `(:height 0.9 :foreground ,(face-attribute 'spaceline-flycheck-warning :foreground)
                                                    :background "#1d5464"))
                 ((string-match "✖ [0-9]" text) `(:height 0.9 :foreground ,(face-attribute 'spaceline-flycheck-error :foreground)
                                                          :background "#333333"))
                 ((string-match "✣ Disabled" text) `(:height 0.9))
                 (t '(:height 0.9 :inherit)))))
        (propertize (format " %s " text)
                    'face f
                    'help-echo "Show Flycheck Errors"
                    'mouse-face '(:box 1)
                    'local-map (make-mode-line-mouse-map 'mouse-1 (lambda () (interactive) (flycheck-list-errors)))))
      :when active)

    ;; (spaceline-define-segment nasy:keycast-keys
    ;;   "Keycast modeline segment."
    ;;   (and (funcall keycast-window-predicate)
    ;;        (let* ((key (ignore-errors
    ;;                      (key-description keycast--this-command-keys)))
    ;;               (cmd keycast--this-command)
    ;;               (elt (or (assoc cmd keycast-substitute-alist)
    ;;                        (assoc key keycast-substitute-alist))))
    ;;          (when elt
    ;;            (pcase-let ((`(,_ ,k ,c) elt))
    ;;              (unless (eq k t) (setq key k))
    ;;              (unless (eq c t) (setq cmd c))))
    ;;          (and key cmd
    ;;               (concat
    ;;                (propertize (let ((pad (max 2 (- 5 (length key)))))
    ;;                              (concat (make-string (ceiling pad 2) ?\s) key
    ;;                                      (make-string (floor   pad 2) ?\s)))
    ;;                            'face 'keycast-key)
    ;;                ;; (format " %s" (propertize (symbol-name cmd)
    ;;                ;;                           'face 'keycast-command))
    ;;                )))))

    (spaceline-define-segment lsp
      "The LSP server state."
      (when (bound-and-true-p lsp-mode)
        (concat (lsp-mode-line) " "))
      :when active)

    (add-hook
     'after-init-hook
     (lambda () (spaceline-compile
             `(((buffer-modified major-mode buffer-size) :face highlight-face)
               (anzu)
               (auto-compile)
               ((nasy:version-control project-name) :separator " in " :face 'spaceline-flycheck-warning :when active)
               ((nasy:version-control project-name) :separator " in " :when (not active))
               (buffer-id)
               (lsp)
               (nyan-cat :tight t))
             `((selection-info)
               (line-column :when active)
               (line-column :when (not active))
               (global :when active)
               (process)
               ;; (minor-modes)
               (buffer-position
                hud)
               ((flycheck-status (flycheck-error flycheck-warning flycheck-info)) :when active)
               (nasy-time :face 'spaceline-evil-replace :when active)
               (nasy-time :when (not active)))))))
#+end_src
