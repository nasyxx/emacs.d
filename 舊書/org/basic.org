#+begin_src elisp
  (use-package org
    :preface
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))

    ;; Exclude DONE state tasks from refile targets
    (defun verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets."
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    (setq org-refile-target-verify-function 'verify-refile-target)

    (defun org-refile-anywhere (&optional goto default-buffer rfloc msg)
      "A version of `org-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-refile goto default-buffer rfloc msg)))

    (defun org-agenda-refile-anywhere (&optional goto rfloc no-update)
      "A version of `org-agenda-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-agenda-refile goto rfloc no-update)))

    (defun nasy/org-html-paragraph-advice (orig paragraph contents &rest args)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let* ((fix-regexp "[[:multibyte:]]")
             (fixed-contents
              (replace-regexp-in-string
               (concat
                "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" contents)))
        (apply orig paragraph fixed-contents args)))
    (advice-add #'org-html-paragraph :around #'nasy/org-html-paragraph-advice)

    (defun nasy/org-fix-saveplace ()
      "Fix a problem with saveplace.el putting you back in a folded position"
      (when (outline-invisible-p)
        (save-excursion
          (outline-previous-visible-heading 1)
          (org-show-subtree))))

    (defvar-local nasy/org-at-src-begin -1
      "Variable that holds whether last position was a ")

    (defvar nasy/ob-header-symbol ?☰
      "Symbol used for babel headers")

    (defun nasy/org-prettify-src--update ()
      (let ((case-fold-search t)
            (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
            found)
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward re nil t)
            (goto-char (match-end 0))
            (let ((args (org-trim
                         (buffer-substring-no-properties (point)
                                                         (line-end-position)))))
              (when (org-string-nw-p args)
                (let ((new-cell (cons args nasy/ob-header-symbol)))
                  (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                  (cl-pushnew new-cell found :test #'equal)))))
          (setq prettify-symbols-alist
                (cl-set-difference prettify-symbols-alist
                                   (cl-set-difference
                                    (cl-remove-if-not
                                     (lambda (elm)
                                       (eq (cdr elm) nasy/ob-header-symbol))
                                     prettify-symbols-alist)
                                    found :test #'equal)))
          ;; Clean up old font-lock-keywords.
          (font-lock-remove-keywords nil prettify-symbols--keywords)
          (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
          (font-lock-add-keywords nil prettify-symbols--keywords)
          (while (re-search-forward re nil t)
            (font-lock-flush (line-beginning-position) (line-end-position))))))

    (defun nasy/org-prettify-src ()
      "Hide src options via `prettify-symbols-mode'.

    `prettify-symbols-mode' is used because it has uncollpasing. It's
    may not be efficient."
      (let* ((case-fold-search t)
             (at-src-block (save-excursion
                             (beginning-of-line)
                             (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
        ;; Test if we moved out of a block.
        (when (or (and nasy/org-at-src-begin
                       (not at-src-block))
                  ;; File was just opened.
                  (eq nasy/org-at-src-begin -1))
          (nasy/org-prettify-src--update))
        ;; Remove composition if at line; doesn't work properly.
        ;; (when at-src-block
        ;;   (with-silent-modifications
        ;;     (remove-text-properties (match-end 0)
        ;;                             (1+ (line-end-position))
        ;;                             '(composition))))
        (setq nasy/org-at-src-begin at-src-block)))

    (defun nasy/org-prettify-symbols ()
      (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
            (cl-reduce 'append
                       (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                               `(("#+begin_src" . ?λ)
                                 ("#+end_src"   . ?⌞)
                                 ("#+header:" . ,nasy/ob-header-symbol)
                                 ("#+begin_quote" . ?✎)
                                 ("#+end_quote" . ?⌞)))))
      (turn-on-prettify-symbols-mode)
      (add-hook 'post-command-hook 'nasy/org-prettify-src t t))

    :bind (:map org-src-mode-map
           ("C-c _"    . org-edit-src-exit))
    :hook ((org-mode . auto-fill-mode)
           (org-mode . nasy/org-fix-saveplace)
           (org-mode . nasy/org-prettify-symbols))
    :init
    (gsetq
     org-archive-mark-done nil
     org-archive-location  "%s_archive::* Archive"
     org-archive-mark-done nil

     org-catch-invisible-edits 'smart

     org-default-notes-file "~/notes/default.org"

     org-edit-timestamp-down-means-later t

     org-ellipsis " ﹅"

     org-emphasis-regexp-components ;; markup chinesee without space
        (list (concat " \t('\"{"            "[:nonascii:]")
              (concat "- \t.,:!?;'\")}\\["  "[:nonascii:]")
              " \t\r\n,\"'"
              "."
              1)

     org-export-backends                           '(ascii html latex md)
     org-export-coding-system                      'utf-8
     org-export-kill-product-buffer-when-displayed t
     org-export-with-broken-links                  'mark
     org-export-with-sub-superscripts              '{}
     org-use-sub-superscripts                      '{}

     org-fast-tag-selection-single-key 'expert

     org-highlight-latex-and-related: '(native latex script entities)

     org-hide-emphasis-markers t
     org-hide-leading-stars    nil

     org-html-checkbox-type       'uncode
     org-html-doctype             "html5"
     org-html-html5-fancy         t
     org-html-htmlize-output-type 'inline-css
     org-html-klipsify-src        t
     org-html-mathjax-options     '((path          "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS-MML_HTMLorMML")
                                    (scale         "100")
                                    (align         "center")
                                    (font          "Neo-Euler")
                                    (linebreaks    "false")
                                    (autonumber    "AMS")
                                    (indent        "0em")
                                    (multlinewidth "85%")
                                    (tagindent     ".8em")
                                    (tagside       "right"))
     org-html-with-latex          'mathjax
     org-html-validation-link     nil

     org-indent-mode-turns-on-hiding-stars nil

     org-pretty-entities t

     ;; org time
     org-display-custom-times         t
     org-time-stamp-custom-formats    '("<%a, %b %d, %Y>" . "<%a, %b %d, %Y at %H:%M>")
     org-export-date-timestamp-format "%b %d, %Y"

     ;; org latex
     org-latex-compiler "lualatex"
     org-latex-default-packages-alist
     (quote
      (("AUTO" "inputenc"  t   ("pdflatex"))
       ("T1"   "fontenc"   t   ("pdflatex"))
       (""     "graphicx"  t   nil)
       (""     "grffile"   t   nil)
       (""     "longtable" t   nil)
       (""     "booktabs"  t   nil)
       (""     "wrapfig"   nil nil)
       (""     "rotating"  nil nil)
       ("normalem" "ulem"  t   nil)
       (""     "amsmath"   t   nil)
       (""     "textcomp"  t   nil)
       (""     "amssymb"   t   nil)
       (""     "capt-of"   nil nil)
       ("colorlinks,unicode,linkcolor=blue,anchorcolor=blue,citecolor=green,filecolor=black,urlcolor=blue"
        "hyperref" t nil)
       (""            "luatexja-fontspec" t nil)
       (""            "listings"          t nil)
       (""            "algorithm"         t nil)
       (""            "algpseudocode"     t nil)
       ("cache=false" "minted"            t nil)))
     org-latex-default-table-environment "longtable"
     org-latex-listings 'minted
     org-latex-listings-langs
     (quote
      ((emacs-lisp   "Lisp")
       (lisp         "Lisp")
       (clojure      "Lisp")
       (c            "C")
       (C            "C")
       (cc           "C++")
       (fortran      "fortran")
       (perl         "Perl")
       (cperl        "Perl")
       (Python       "Python")
       (python       "Python")
       (ruby         "Ruby")
       (html         "HTML")
       (xml          "XML")
       (tex          "TeX")
       (latex        "[LaTeX]TeX")
       (sh           "bash")
       (shell-script "bash")
       (gnuplot      "Gnuplot")
       (ocaml        "Caml")
       (caml         "Caml")
       (sql          "SQL")
       (sqlite       "sql")
       (makefile     "make")
       (make         "make")
       (R            "r")))
     org-latex-pdf-process
     (quote
      ("lualatex -shell-escape -interaction nonstopmode %f"
       "lualatex -shell-escape -interaction nonstopmode %f"))
     org-latex-tables-booktabs t

     org-level-color-stars-only nil
     org-list-indent-offset 2
     org-log-done t

     org-outline-path-complete-in-steps nil

     org-refile-allow-creating-parent-nodes 'confirm
     ;; org-refile-targets                     '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))
     org-refile-use-cache                   nil
     org-refile-use-outline-path            t

     org-startup-indented  t
     org-startup-folded    'content
     org-startup-truncated nil

     org-src-lang-modes '(("C"         . c)
                          ("C++"       . c++)
                          ("asymptote" . asy)
                          ("bash"      . sh)
                          ("beamer"    . latex)
                          ("calc"      . fundamental)
                          ("makefile"  . fundamental)
                          ("make"      . fundamental)
                          ("cpp"       . c++)
                          ("ditaa"     . artist)
                          ("dot"       . fundamental)
                          ("elisp"     . emacs-lisp)
                          ("ocaml"     . tuareg)
                          ("screen"    . shell-script)
                          ("shell"     . sh)
                          ("sqlite"    . sql))

     org-support-shift-select t

     org-tags-column 80

     ;; to-do settings
     org-todo-keywords        (quote ((sequence "TODO(t)" "WIP(w/!)" "WAIT(W@/!)" "HOLD(h)" "|" "CANCELLED(c@/!)" "DONE(d!/!)")))
     org-todo-repeat-to-state "NEXT"
     org-todo-keyword-faces   (quote (("NEXT" :inherit warning)
                                      ("WAIT" :inherit font-lock-string-face))))
    (nasy/add-company-backend 'org-mode 'company-tabnine)
    :config
    ;; --------
    (org-babel-do-load-languages
     'org-babel-load-languages
     `((ditaa      . t)
       (dot        . t)
       (elvish     . t)
       (emacs-lisp . t)
       (gnuplot    . t)
       (haskell    . nil)
       (latex      . t)
       (ledger     . t)
       (ocaml      . nil)
       (octave     . t)
       (plantuml   . t)
       (python     . t)
       (R          . t)
       (restclient . t)
       (ruby       . t)
       (screen     . nil)
       (,(if (locate-library "ob-sh") 'sh 'shell) . t)
       (sql        . nil)
       (sqlite     . t)))

    (gsetq org-babel-python-command "python")

    ;; --------
    (gsetq luamagick
           '(luamagick
             :programs ("lualatex" "convert")
             :description "pdf > png"
             :message "you need to install lualatex and imagemagick."
             :use-xcolor t
             :image-input-type "pdf"
             :image-output-type "png"
             :image-size-adjust (1.0 . 1.0)
             :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
             :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O")))
    (add-to-list 'org-preview-latex-process-alist luamagick)

    (gsetq luasvg
           '(luasvg
             :programs ("lualatex" "dvisvgm")
             :description "dvi > svg"
             :message "you need to install lualatex and dvisvgm."
             :use-xcolor t
             :image-input-type "dvi"
             :image-output-type "svg"
             :image-size-adjust (1.7 . 1.5)
             :latex-compiler ("lualatex -interaction nonstopmode -output-format dvi -output-directory %o %f")
             :image-converter ("dvisvgm %f -n -b min -c %S -o %O")))
    (add-to-list 'org-preview-latex-process-alist luasvg)
    (gsetq org-preview-latex-default-process 'luamagick)

    (require 'org-tempo nil t)
    (after! ox
      (let ((oxs '(ox-rst
                   ox-pandoc)))
        (dolist (language oxs)
          (straight-use-package language)
          (require language nil t)))))
#+end_src
