#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-core-mixed.el")

* Header                                                                        :noexport:

#+begin_src elisp
  ;;; nasy-core-mixed.el  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Configuration Core Mixed.

  ;;; Code:
#+end_src

* Disable Some Features

#+begin_src elisp
  (setq use-file-dialog        nil
        use-dialog-box         nil
        inhibit-startup-screen t)

  ;; (when (fboundp 'tool-bar-mode)
  ;;   (tool-bar-mode -1))

  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+end_src

* History, Saving, Desktop and Session

#+begin_src elisp
  (leaf savehist
    :hook after-init-hook
    :custom
    (kill-ring-max              . 300)
    (history-length             . 3000)
    (history-delete-duplicates  . t)
    (savehist-autosave-interval . 60)
    (savehist-additional-variables
     . '(mark-ring
         global-mark-ring
         search-ring
         regexp-search-ring
         extended-command-history)))

  (leaf session
    :hook
    (after-init-hook . session-initialize)
    :custom
    `(session-save-file              . ,(no-littering-expand-var-file-name ".session"))
    (session-name-disable-regexp     . "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)")
    (session-save-file-coding-system . 'utf-8)
    (desktop-globals-to-save
     . '((comint-input-ring        . 50)
         (compile-history          . 30)
         desktop-missing-file-warning
         (dired-regexp-history     . 20)
         (extended-command-history . 30)
         (face-name-history        . 20)
         (file-name-history        . 100)
         (grep-find-history        . 30)
         (grep-history             . 30)
         (ivy-history              . 100)
         (magit-revision-history   . 50)
         (minibuffer-history       . 50)
         (org-clock-history        . 50)
         (org-refile-history       . 50)
         (org-tags-history         . 50)
         (query-replace-history    . 60)
         (read-expression-history  . 60)
         (regexp-history           . 60)
         (regexp-search-ring       . 20)
         register-alist
         (search-ring              . 20)
         (shell-command-history    . 50)
         tags-file-name
         tags-table-list
         kill-ring)))

#+end_src

* macOS Frame

#+begin_src elisp
  (leaf mac-frame
    :when *is-a-mac*
    :config
    (defun stop-minimizing-window ()
      "Stop minimizing window under macOS."
      (interactive)
      (unless (and *is-a-mac*
                  window-system)
        (suspend-frame)))
    :custom
    (default-frame-alist
      . '((ns-transparent-titlebar . t)
          (ns-appearance           . light)
          (alpha                   . (80 . 75))
          (vertical-scroll-bars    . nil)
          (internal-border-width   . 24))))
#+end_src

* Minibuffer

#+begin_src elisp
  (setq enable-recursive-minibuffers t)

  (add-hook #'after-init-hook #'(lambda () (minibuffer-depth-indicate-mode 1)))

  ;; https://www.reddit.com/r/emacs/comments/4d8gvt/how_do_i_automatically_close_the_minibuffer_after/
  (defun helper/kill-minibuffer ()
    "Exit the minibuffer if it is active."
    (when (and (>= (recursion-depth) 1)
             (active-minibuffer-window))
      (abort-recursive-edit)))

  (add-hook #'mouse-leave-buffer-hook #'helper/kill-minibuffer)
#+end_src

* Shell

#+begin_src elisp
  (leaf noflet
    :commands noflet)

  (defun nasy/shell-command-in-view-mode (start end command &optional output-buffer replace &rest other-args)
    "Put \"*Shell Command Output*\" buffers into view-mode."
    (unless (or output-buffer replace)
      (with-current-buffer "*Shell Command Output*"
        (view-mode 1))))
  (advice-add 'shell-command-on-region :after 'nasy/shell-command-in-view-mode)

  (leaf exec-path-from-shell
    :init
    ;; Non-Forking Shell Command To String
    ;; https://github.com/bbatsov/projectile/issues/1044
    ;;--------------------------------------------------------------------------

    (defun call-process-to-string (program &rest args)
      (with-temp-buffer
        (apply 'call-process program nil (current-buffer) nil args)
        (buffer-string)))

    (defun get-call-process-args-from-shell-command (command)
      (cl-destructuring-bind
          (the-command . args) (split-string command " ")
        (let ((binary-path (executable-find the-command)))
          (when binary-path
            (cons binary-path args)))))

    (defun shell-command-to-string (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args)
          (shell-command-to-string command))))

    (defun try-call-process (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args))))

    (advice-add 'shell-command-to-string :before-until 'try-call-process)

    (defun call-with-quick-shell-command (fn &rest args)
      (noflet ((shell-command-to-string
                (&rest args)
                (or (apply 'try-call-process args) (apply this-fn args))))
              (apply fn args)))

    (advice-add 'projectile-find-file :around 'call-with-quick-shell-command)
    :custom
    (exec-path-from-shell-warn-duration-millis . 20)
    (shell-command-switch . "-dc")
    (exec-path-from-shell-arguments . '("-d" "-f"))
    ;; ((exec-path-from-shell-arguments
    ;;   exec-path-from-shell-check-startup-files) . nil)
    :config
    (exec-path-from-shell-initialize))
#+end_src

* Text Scale

#+begin_src elisp
  (leaf default-text-scale
    :commands default-text-scale-mode
    :hook after-init-hook)
#+end_src

* Footer                                                                      :noexport:

#+begin_src elisp
  (provide 'nasy-core-mixed)
  ;;; nasy-core-mixed.el ends here
#+end_src
