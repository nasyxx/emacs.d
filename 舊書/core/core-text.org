#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-core-text.el")

* Header                                                                        :noexport:

#+begin_src elisp
  ;;; nasy-core-text.el  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Emacs Configuration Core Text file.

  ;;; Code:
#+end_src

* Functions

#+begin_src elisp
  ;;;###autoload
  (defun nasy/delete-backward-word (arg)
    "Like `backward-kill-word', but doesn't affect the kill-ring."
    (interactive "p")
    (let (kill-ring)
      (backward-kill-word arg)))

  ;;;###autoload
  (defun nasy/region-active-p ()
    "Return non-nil if selection is active."
    (declare (side-effect-free t))
    (use-region-p))

  ;;;###autoload
  (defun nasy/region-beginning ()
    "Return beginning position of selection."
    (declare (side-effect-free t))
    (region-beginning))

  ;;;###autoload
  (defun nasy/region-end ()
    "Return end position of selection."
    (declare (side-effect-free t))
    (region-end))

  ;;;###autoload
  (defun nasy/thing-at-point-or-region (&optional thing prompt)
    "Grab the current selection, THING at point, or xref identifier at point.
  Returns THING if it is a string. Otherwise, if nothing is found at point and
  PROMPT is non-nil, prompt for a string (if PROMPT is a string it'll be used as
  the prompting string). Returns nil if all else fails.
  NOTE: Don't use THING for grabbing symbol-at-point. The xref fallback is smarter
  in some cases."
    (declare (side-effect-free t))
    (cond ((stringp thing)
           thing)
          ((nasy/region-active-p)
           (buffer-substring-no-properties
            (nasy/region-beginning)
            (nasy/region-end)))
          (thing
           (thing-at-point thing t))
          ((require 'xref nil t)
           ;; A little smarter than using `symbol-at-point', though in most cases,
           ;; xref ends up using `symbol-at-point' anyway.
           (xref-backend-identifier-at-point (xref-find-backend)))
          (prompt
           (read-string (if (stringp prompt) prompt "")))))

  ;;;###autoload
  (defalias 'default/newline #'newline)

  ;;;###autoload
  (defun default/newline-above ()
    "Insert an indented new line before the current one."
    (interactive)
    (beginning-of-line)
    (save-excursion (newline))
    (indent-according-to-mode))

  ;;;###autoload
  (defun default/newline-below ()
    "Insert an indented new line after the current one."
    (interactive)
    (end-of-line)
    (newline-and-indent))

  ;;;###autoload
  (defun default/yank-pop ()
    "Interactively select what text to insert from the kill ring."
    (interactive)
    (call-interactively
     (cond ((fboundp 'counsel-yank-pop)    #'counsel-yank-pop)
           ((fboundp 'helm-show-kill-ring) #'helm-show-kill-ring)
           ((error "No kill-ring search backend available. Enable ivy or helm!")))))

  ;;;###autoload
  (defun default/yank-buffer-filename ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (if-let* ((filename (or buffer-file-name (bound-and-true-p list-buffers-directory))))
        (message (kill-new (abbreviate-file-name filename)))
      (error "Couldn't find filename in current buffer")))

  ;;;###autoload
  (defun default/insert-file-path (arg)
    "Insert the file name (absolute path if prefix ARG).
  If `buffer-file-name' isn't set, uses `default-directory'."
    (interactive "P")
    (let ((path (or buffer-file-name default-directory)))
      (insert
       (if arg
           (abbreviate-file-name path)
         (file-name-nondirectory path)))))

  ;;;###autoload
  (defun default/newline-indent-and-continue-comments-a ()
    "A replacement for `newline-and-indent'.
  Continues comments if executed from a commented line, with special support for
  languages with weak native comment continuation support (like C-family
  languages)."
    (interactive)
    (if (and (sp-point-in-comment)
             comment-line-break-function)
        (funcall comment-line-break-function nil)
      (delete-horizontal-space t)
      (newline nil t)
      (indent-according-to-mode)))

  ;;;###autoload
  (defun nasy/change-char-width (char width)
    "Change CHAR width to WIDTH."
    (let ((table (make-char-table nil)))
      (set-char-table-parent table char-width-table)
      (set-char-table-range table char width)
      (setq char-width-table table)))
#+end_src

* Footer                                                                        :noexport:

#+begin_src elisp
  (provide 'nasy-core-text)
  ;;; nasy-core-text.el ends here
#+end_src
