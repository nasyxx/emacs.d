Include python-mode, black, py-isort, python-docstring and sphinx-doc.

* Packages

#+begin_src elisp
  (let ((packages '(flycheck-mypy py-isort python-docstring sphinx-doc pyimport)))
    (dolist (package packages)
      (straight-use-package package)))
  (when *pyblack*
    (straight-use-package 'python-black))

  (let ((module
         (cond ((eq *py-module* 'elpy)    'elpy)
               ((eq *py-module* 'pyls)    'lsp-mode)
               ((eq *py-module* 'mspyls)  'lsp-python-ms)
               ((eq *py-module* 'pylance) 'elpy))))
    (straight-use-package module))

#+end_src

* Autoloads

#+begin_src elisp
  ;;;###autoload
  (defcustom nasy*python-buffer "vterm"
    "Nasy Python Buffer"
    :group 'python-mode
    :type 'string)

  ;;;###autoload
  (defun nasy/python-send-buffer ()
    "Send current buffer to the running python process."
    (interactive)
    (let ((proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (save-buffer)
      (comint-simple-send proc
                          (concat "%run " (format "%s" (buffer-file-name))))
      (pop-to-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-region (begin end)
    "Evaluate the code in region from BEGIN to END in the python repl.
  if the region is unset, the current line will be used."
    (interactive "r")
    (unless (use-region-p)
      (setq begin (line-beginning-position)
            end (line-end-position)))
    (let* ((text (buffer-substring-no-properties begin end))
           (proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (comint-simple-send proc text)
      (display-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-defun (&optional arg)
    "Send the current defun to inferior Python process.
  When ARG is non-nil do not include decorators."
    (interactive (list current-prefix-arg t))
    (nasy:python-send-region
     (progn
       (end-of-line 1)
       (while (and (or (python-nav-beginning-of-defun)
                       (beginning-of-line 1))
                   (> (current-indentation) 0)))
       (when (not arg)
         (while (and (forward-line -1)
                     (looking-at (python-rx decorator))))
         (forward-line 1))
       (point-marker)
       (progn
         (or (python-nav-end-of-defun)
             (end-of-line 1))
         (point-marker)))))

  ;;;###autoload
  (defun nasy/python-switch-to-shell ()
    "Switch to inferior Python process buffer."
    (interactive "p")
    (let ((proc (get-buffer-process nasy:python-buffer)))
      (unless proc
        (error "No process found"))
      (pop-to-buffer nasy*python-buffer)))
#+end_src

* Configs

#+begin_src elisp
  (general-define-key
   :prefix "C-c"
   :keymaps 'python-mode-map
   "C-b" 'nasy/python-send-buffer
   "C-r" 'nasy/python-send-region
   "C-c" 'nasy/python-send-defun
   "C-z" 'nasy/python-switch-to-shell)
  (general-define-key
   :keymaps 'python-mode-map
   "<S-return>" 'nasy/python-send-region)
#+end_src

** elpy

#+begin_src elisp
  (use-package elpy
    :if (or (eq *py-module* 'elpy)
           (eq *py-module* 'pylance))
    :defer t
    :init
    ;; (add-to-list 'exec-path "/Users/Nasy/Library/Python/3.7/bin")
    (gsetq elpy-rpc-virtualenv-path 'current)
    (advice-add 'python-mode :before 'elpy-enable)


    (gsetq elpy-modules '(elpy-module-company
                          elpy-module-folding
                          elpy-module-yasnippet))

    (when (eq *py-module* 'elpy)
      (add-to-list 'elpy-modules 'elpy-module-autodoc)
      (add-to-list 'elpy-modules 'elpy-module-eldoc))

    :config
    (when (eq *py-module* 'elpy)
      (nasy/add-company-backend 'python-mode '(elpy-company-backend
                                               company-files
                                               :with company-tabnine company-yasnippet))

      (set-lookup-handlers! 'python-mode :async t
          :documentation #'elpy-doc
          :definition #'elpy-goto-definition
          :implementations #'elpy-goto-assignment
          :references #'xref-find-references))

    (advice-add
     'elpy-module-folding :after
     #'(lambda (&rest _)
         (define-key elpy-mode-map (kbd "<mouse-1>") nil))))
#+end_src

** lsp-pyls

#+begin_src elisp
  (use-package lsp-pyls
    :if (eq *py-module* 'pyls)
    :defer t
    :init
    (defun start-lsp-pyls ()
      "Start lsp-pyls."
      (require 'lsp-pyls)
      (lsp-deferred))
    :hook ((python-mode . start-lsp-pyls)
           (after-init  . python-flycheck-setup))
    :config
    (nasy/add-company-backend 'python-mode '(company-capf
                                             company-files
                                             :with company-tabnine company-yasnippet))
    ;; A list here https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json#L23-L230
    ;; I prefer pydocstyle and black, so disabled yapf, though, pydocstyle still cannot be abled.
    ;; pip install black pyls-black -U
    ;; The default line-length is 88 when using black, you can add a file named "pyproject.yaml" that contains
    ;; [tool.black]
    ;; line-length = 79
    (gsetq lsp-pyls-configuration-sources              ["pycodestyle" "pydocstyle" "flake8"]
           lsp-pyls-plugins-pylint-enabled             nil
           lsp-pyls-plugins-pycodestyle-enabled        t
           lsp-pyls-plugins-pydocstyle-enabled         t
           lsp-pyls-plugins-pydocstyle-convention      "numpy"
           lsp-pyls-plugins-pydocstyle-add-select.     '("D107" "D413" "D415" "D416")
           lsp-pyls-plugins-rope-completion-enabled    t
           lsp-pyls-plugins-autopep8-enabled           t
           lsp-pyls-plugins-yapf-enabled               nil
           lsp-pyls-plugins-flake8-enabled             t)

    (unless *pyblack*
      (add-hook #'python-mode-hook
                #'(lambda () (add-hook #'before-save-hook #'lsp-format-buffer nil t)))))
#+end_src

** lsp-python-ms

#+begin_src elisp
  (use-package lsp-python-ms
    :if (eq *py-module* 'mspyls)
    :defer t
    :preface
    (defun start-lsp-mspyls ()
      "Start lsp-python-ms."
      (require 'lsp-python-ms)
      (lsp-deferred))
    :init
    (nasy/add-company-backend 'python-mode '(company-capf
                                             company-files
                                             :with company-tabnine company-yasnippet))
    (gsetq
     lsp-python-ms-nupkg-channel "daily"
     lsp-python-ms-log-level     (if *debug* "Trace" "Error")
     lsp-python-ms-executable    (executable-find "Microsoft.Python.LanguageServer")
     lsp-python-ms-information   ["too-many-function-arguments"
                                  "too-many-positional-arguments-before-star"]
     lsp-python-ms-errors        ["inherit-non-class"
                                  "no-method-argument"
                                  "parameter-already-specified"
                                  "parameter-missing"
                                  "positional-argument-after-keyword"
                                  "positional-only-named"
                                  "return-in-init"
                                  "typing-generic-arguments"
                                  "typing-newtype-arguments"
                                  "typing-typevar-arguments"
                                  "unknown-parameter-name"
                                  "undefined-variable"]
     lsp-python-ms-warnings      ["no-cls-argument"
                                  "no-self-argument"
                                  "unresolved-import"
                                  "variable-not-defined-globally"
                                  "variable-not-defined-nonlocal"])
    :hook ((python-mode . start-lsp-mspyls)))
#+end_src

** lsp-pylance

#+begin_src elisp
  (when (eq *py-module* 'pylance)

    (nasy/add-company-backend 'python-mode
      '(company-capf
        elpy-company-backend
        company-files
        :with company-tabnine company-yasnippet))

    (defun nasy/lsp-pylance ()

      (require 'lsp-mode)

      (defvar lsp-pylance-executable (executable-find "pylance")
        "Pylance executable.

      code --install-extension ms-python.vscode-pylance

      #!/bin/bash
      set -euo pipefail

      node $HOME/.vscode/extensions/ms-python.vscode-pylance-2020.7.1/server/server.bundle.js --stdio")

      (defvar lsp-pylance-type-checking "basic"
        "Used to specify the level of type checking analysis performed;

      ,* Default: off

      ,* Available values:
      - off: No type checking analysis is conducted; unresolved imports/variables diagnostics are produced
      - basic: Non-type checking-related rules (all rules in off) + basic type checking rules
      - strict: All type checking rules at the highest severity of error (includes all rules in off and basic categories")

      (lsp-register-custom-settings
       `(("pylance.insidersChannel"                "daily"
          "python.analysis.typeCheckingMode"       lsp-pylance-type-checking
          "python.analysis.diagnosticMode"         "openFilesOnly"
          "python.analysis.stubPath"               "./typings"
          "python.analysis.autoSearchPaths"        t
          "python.analysis.extraPaths"             []
          "python.analysis.useLibraryCodeForTypes" t
          "python.analysis.autoImportCompletions"  t
          "python.analysis.completeFunctionParens" t)))

      (lsp-register-client
       (make-lsp-client
        :new-connection (lsp-stdio-connection (lambda () lsp-pylance-executable)
                                              (lambda () (f-exists? lsp-pylance-executable)))
        :major-modes '(python-mode)
        :server-id 'pylance
        :priority 3
        :initialized-fn (lambda (workspace)
                          (with-lsp-workspace workspace
                            (lsp--set-configuration (lsp-configuration-section "python"))))
        :notification-handlers (lsp-ht ("pylance/beginProgress"  'ignore)
                                       ("pylance/reportProgress" 'ignore)
                                       ("pylance/endProgress"    'ignore)))))

      ;; (set-lookup-handlers! 'python-mode :async t
      ;;   :documentation #'lsp-describe-thing-at-point
      ;;   :definition #'lsp-find-definition
      ;;   :implementations #'lsp-find-implementation
      ;;   :type-definition #'lsp-find-type-definition
      ;;   :references #'lsp-find-references))

    (defun start-lsp-pylance ()
      "Start lsp-pylance."
      (nasy/lsp-pylance)
      (python-flycheck-setup)
      (gsetq elpy-modules (remove 'elpy-module-autodoc elpy-modules))
      (gsetq elpy-modules (remove 'elpy-module-eldoc   elpy-modules))
      (lsp-deferred))

    (add-hook #'python-mode-hook #'start-lsp-pylance))
#+end_src

** Flycheck Mypy

#+begin_src elisp
  (gsetq flycheck-python-mypy-ini "~/.config/mypy/config")
#+end_src

** PyType

# #+begin_src elisp
#   (after! flycheck
#     (flycheck-def-args-var flycheck-python-pytype-args python-pytype)

#     (flycheck-define-checker python-pytype
#       "Pytype syntax checker.

#       See url `https://github.com/google/pytype`."
#       :command ("pytype"
#                 (eval flycheck-python-pytype-args)
#                 source-original)
#       :error-patterns
#       ((warning line-start "File \"" (file-name) "\", line " line ", " (message (one-or-more (not (any "[")))) "[" (id (one-or-more not-newline)) "]"))
#       :modes python-mode
#       :predicate flycheck-buffer-saved-p)
#       ;; :next-checkers (python-flake8))

#     (add-to-list 'flycheck-checkers 'python-pytype t))
# #+end_src

** black

#+begin_src elisp
  ;; Now you can use it in lsp.
  ;; NOTICE you have to config black though pyproject.toml.
  (when *pyblack*
    (use-package python-black
      :hook ((python-mode . python-black-on-save-mode))
      :init (gsetq python-black-extra-args
                   '("--line-length" "79" "-t" "py38"))))
#+end_src

** py-isort

#+begin_src elisp
  (use-package py-isort
    :hook ((before-save . py-isort-before-save)))
#+end_src

** Python Docstring

#+begin_src elisp
  (use-package python-docstring
    :hook ((python-mode . python-docstring-mode)))
#+end_src

** Sphinx Doc

#+begin_src elisp
  (use-package sphinx-doc
    :hook ((python-mode . sphinx-doc-mode)))
#+end_src

** pyimport

#+begin_src elisp
  (use-package pyimport
    :bind (:map python-mode-map
                ("C-c C-i" . pyimport-insert-missing)))
#+end_src
