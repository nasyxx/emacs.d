Clangd or ccls.

* Packages

#+begin_src elisp
  (nasy/s-u-p macrostep)
  (when *ccls*
      (nasy/s-u-p ccls))
#+end_src

* Configs

** macrostep

#+begin_src elisp
  (use-package macrostep
    :defer t
    :general
    (:keymaps 'c-mode-map
              "C-c e" #'macrostep-expand)
    (:keymaps 'c++-mode-map
              "C-c e" #'macrostep-expand)
    (:keymaps 'objc-mode-map
              "C-c e" #'macrostep-expand))
#+end_src

** clangd

#+begin_src elisp
  (use-package lsp-mode
    :if *clangd*
    :hook (((c-mode c++-mode objc-mode) . lsp-deferred))
    :init (setq-default lsp-clients-clangd-executable *clangd*))
#+end_src

** ccls

#+begin_src elisp
  (when *ccls*
    (use-package ccls
      :preface
      (defun ccls/load ()
        (require 'ccls)
        (lsp-deferred))
      :hook (((c-mode c++-mode objc-mode) . ccls/load))
      :init
      (gsetq ccls-executable *ccls*
             ccls-initialization-options
             '(:clang (:extraArgs
                       ["-isysroot"
                        "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"])
               :index (:comments 2)
               :completion (:detailedLabel t)
               ccls-sem-highlight-method 'font-lock))
      (gsetq ccls-sem-function-colors
             '("#e5b124" "#927754" "#eb992c" "#e2bf8f" "#d67c17"
               "#88651e" "#e4b953" "#a36526" "#b28927" "#d69855")
             ccls-sem-macro-colors
             '("#e79528" "#c5373d" "#e8a272" "#d84f2b" "#a67245"
               "#e27a33" "#9b4a31" "#b66a1e" "#e27a71" "#cf6d49")
             ccls-sem-namespace-colors
             '("#aa96da" "#fcbad3" "#ffffd2" "#a8d8ea" "#ffcfdf"
               "#fefdca" "#e0f9b5" "#a5dee5" "#eef9bf" "#a7e9af")
             ccls-sem-parameter-colors
             '("#aa96da" "#fcbad3" "#ffffd2" "#a8d8ea" "#ffcfdf"
               "#fefdca" "#e0f9b5" "#a5dee5" "#eef9bf" "#a7e9af")
             ccls-sem-type-colors
             '("#e1afc3" "#d533bb" "#9b677f" "#e350b6" "#a04360"
               "#dd82bc" "#de3864" "#ad3f87" "#dd7a90" "#e0438a"))
      :config
      (ccls-use-default-rainbow-sem-highlight)
      (defun ccls/callee ()
        (interactive)
        (lsp-ui-peek-find-custom "$ccls/call" '(:callee t)))
      (defun ccls/caller ()
        (interactive)
        (lsp-ui-peek-find-custom "$ccls/call"))
      (defun ccls/vars (kind)
        (lsp-ui-peek-find-custom "$ccls/vars" `(:kind ,kind)))
      (defun ccls/base (levels)
        (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels)))
      (defun ccls/derived (levels)
        (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels :derived t)))
      (defun ccls/member (kind)
        (lsp-ui-peek-find-custom "$ccls/member" `(:kind ,kind)))

      ;; The meaning of :role corresponds to https://github.com/maskray/ccls/blob/master/src/symbol.h

      ;; References w/ Role::Address bit (e.g. variables explicitly being taken addresses)
      (defun ccls/references-address ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 128)))

      ;; References w/ Role::Dynamic bit (macro expansions)
      (defun ccls/references-macro ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 64)))

      ;; References w/o Role::Call bit (e.g. where functions are taken addresses)
      (defun ccls/references-not-call ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :excludeRole 32)))

      ;; References w/ Role::Read
      (defun ccls/references-read ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 8)))

      ;; References w/ Role::Write
      (defun ccls/references-write ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 16)))

      ;; xref-find-apropos (workspace/symbol)

      (defun my/highlight-pattern-in-text (pattern line)
        (when (> (length pattern) 0)
          (let ((i 0))
           (while (string-match pattern line i)
             (setq i (match-end 0))
             (add-face-text-property (match-beginning 0) (match-end 0) 'isearch t line))
           line)))

      (after! lsp-methods
        ;;; Override
        ;; This deviated from the original in that it highlights pattern appeared in symbol
        (defun lsp--symbol-information-to-xref (pattern symbol)
         "Return a `xref-item' from SYMBOL information."
         (let* ((location (gethash "location" symbol))
                (uri (gethash "uri" location))
                (range (gethash "range" location))
                (start (gethash "start" range))
                (name (gethash "name" symbol)))
           (xref-make (format "[%s] %s"
                              (alist-get (gethash "kind" symbol) lsp--symbol-kind)
                              (my/highlight-pattern-in-text (regexp-quote pattern) name))
                      (xref-make-file-location (string-remove-prefix "file://" uri)
                                               (1+ (gethash "line" start))
                                               (gethash "character" start)))))

        (cl-defmethod xref-backend-apropos ((_backend (eql xref-lsp)) pattern)
          (let ((symbols (lsp--send-request (lsp--make-request
                                             "workspace/symbol"
                                             `(:query ,pattern)))))
            (mapcar (lambda (x) (lsp--symbol-information-to-xref pattern x)) symbols))))))
#+end_src
