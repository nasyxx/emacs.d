* Packages

#+begin_src elisp
  (mapcar 'straight-use-package
          '(lsp-mode
            lsp-ui
            ;; company-lsp
            dap-mode
            lsp-treemacs))
#+end_src

* Autoloads

#+begin_src elisp
  ;;;###autoload
  (defun delete-company-lsp ()
    "Delete company-lsp added by lsp-mode from company-backends"
    (when 'company-backends
      (gsetq company-backends (delete 'intero-company company-backends)
             company-backends (delete 'company-lsp    company-backends))))
#+end_src

* Config

** lsp-mode

#+begin_src elisp
  (defvar lsp-company-backend 'company-lsp
    "What backend to use for lsp-driven autocompletion.
  This can be overridden by `lsp-capf-blacklist'.
  While `company-capf' does not require the `company-lsp' package and should offer
  better performance, it has been integrated into lsp only recently and as of
  02/25/2020 is known to cause issues with some language servers. If you wish to
  use `company-capf' in general but fall back to `company-lsp' for specific
  language servers, set `lsp-company-backend' to `company-capf' and add the
  excluded servers' identifiers to `lsp-capf-blacklist'.")

  (defvar lsp-capf-blacklist '(ts-ls gopls)
    "Language servers listed here will always use the `company-lsp' backend,
  irrespective of what `lsp-company-backend' is set to.")

  (use-package lsp-mode
    :commands (nasy/lsp-init lsp-install-server)
    :defer t
    :preface
    (defun nasy/lsp-init ()
      "Nasy lsp mode init."
      (lsp-flycheck-enable)
      (flycheck-inline-mode -1)
      (when lsp-enable-symbol-highlighting
        (add-hook #'lsp-on-idle-hook #'lsp--document-highlight nil t)
        (lsp--info "Symbol highlighting enabled in current buffer."))
      (lsp-enable-which-key-integration))
    :hook ((lsp-mode . nasy/lsp-init))
    :init
    (gsetq lsp-log-io                         *debug*
           lsp-log-max                        t
           lsp-print-performance              *debug*
           lsp-inhibit-message                t
           lsp-report-if-no-buffer            *debug*
           ;; Auto-kill LSP server once you've killed the last buffer
           ;; associated with its project.
           lsp-keep-workspace-alive           nil
           lsp-enable-snippet                 t
           lsp-auto-guess-root                nil
           lsp-restart                        'interactive
           lsp-auto-configure                 nil
           lsp-document-sync-method           nil
           lsp-auto-execute-action            nil
           lsp-eldoc-enable-hover             t
           lsp-eldoc-render-all               t
           lsp-enable-completion-at-point     nil
           lsp-enable-imenu                   t
           lsp-enable-xref                    t
           lsp-enable-links                   t
           lsp-enable-indentation             t
           lsp-diagnostic-package             :auto
           lsp-enable-on-type-formatting      t
           lsp-signature-auto-activate        t
           lsp-enable-semantic-highlighting   t
           lsp-signature-render-documentation t
           lsp-enable-file-watchers           nil
           lsp-enable-text-document-color     t
           lsp-prefer-capf                    t)

    :config
    (set-lookup-handlers! 'lsp-mode :async t
      :documentation #'lsp-describe-thing-at-point
      :definition #'lsp-find-definition
      :implementations #'lsp-find-implementation
      :type-definition #'lsp-find-type-definition
      :references #'lsp-find-references)
    ;; Don't prompt to restart LSP servers while quitting Emacs
    (add-hook 'kill-emacs-hook #'(lambda () (setq lsp-restart 'ignore))))
#+end_src

** lsp-ui

#+begin_src elisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook ((lsp-mode . lsp-ui-mode))
    :init
    (gsetq lsp-ui-doc-enable                nil
           lsp-ui-doc-position              'at-point
           lsp-ui-doc-header                nil
           lsp-ui-doc-border                "violet"
           lsp-ui-doc-include-signature     t
           lsp-ui-sideline-update-mode      'point
           lsp-ui-sideline-delay            1
           lsp-ui-sideline-show-hover       t
           lsp-ui-sideline-ignore-duplicate t)
    :config
    (after-x 'lsp-ui
      (require 'lsp-ui-peek)
      (set-lookup-handlers! 'lsp-ui-mode :async t
        :definition 'lsp-ui-peek-find-definitions
        :implementations 'lsp-ui-peek-find-implementation
        :references 'lsp-ui-peek-find-references)))
#+end_src

* company-lsp

#+begin_src elisp
  ;; (defun nasy/lsp-init-company-h ()
  ;;   (if (not (bound-and-true-p company-mode))
  ;;       (add-hook 'company-mode-hook #'nasy/lsp-init-company-h t t)
  ;;     (setq-local company-backends
  ;;                 (cons '(company-capf
  ;;                         company-files
  ;;                         :with company-yasnippet)
  ;;                       (remq 'company-capf company-backends)))
  ;;     (remove-hook 'company-mode-hook #'nasy/lsp-init-company-h t)))

  ;; (use-package company-lsp
  ;;   :defer t
  ;;   :commands company-lsp
  ;;   :hook ((lsp-mode . nasy/lsp-init-company-h))
  ;;   :init
  ;;   (gsetq company-lsp-async               t
  ;;          company-lsp-cache-candidates    'auto)
  ;;   :config
  ;;   (with-no-warnings
  ;;     ;; WORKAROUND: Fix tons of unrelated completion candidates shown
  ;;     ;; when a candidate is fulfilled
  ;;     ;; @see https://github.com/emacs-lsp/lsp-python-ms/issues/79
  ;;     (add-to-list 'company-lsp-filter-candidates '(mspyls . t))

  ;;     (defun nasy/company-lsp--on-completion (response prefix)
  ;;       "Handle completion RESPONSE.
  ;; PREFIX is a string of the prefix when the completion is requested.
  ;; Return a list of strings as the completion candidates."
  ;;       (let* ((incomplete (and (hash-table-p response) (gethash "isIncomplete" response)))
  ;;              (items (cond ((hash-table-p response) (gethash "items" response))
  ;;                           ((sequencep response) response)))
  ;;              (candidates (mapcar (lambda (item)
  ;;                                    (company-lsp--make-candidate item prefix))
  ;;                                  (lsp--sort-completions items)))
  ;;              (server-id (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace)))
  ;;              (should-filter (or (eq company-lsp-cache-candidates 'auto)
  ;;                                 (and (null company-lsp-cache-candidates)
  ;;                                      (company-lsp--get-config company-lsp-filter-candidates server-id)))))
  ;;         (when (null company-lsp--completion-cache)
  ;;           (add-hook 'company-completion-cancelled-hook #'company-lsp--cleanup-cache nil t)
  ;;           (add-hook 'company-completion-finished-hook #'company-lsp--cleanup-cache nil t))
  ;;         (when (eq company-lsp-cache-candidates 'auto)
  ;;           ;; Only cache candidates on auto mode. If it's t company caches the
  ;;           ;; candidates for us.
  ;;           (company-lsp--cache-put prefix (company-lsp--cache-item-new candidates incomplete)))
  ;;         (if should-filter
  ;;             (company-lsp--filter-candidates candidates prefix)
  ;;           candidates)))
  ;;     (advice-add #'company-lsp--on-completion
  ;;                 :override
  ;;                 #'nasy/company-lsp--on-completion)))
#+end_src

* lsp-treemacs

#+begin_src elisp
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config
    (lsp-treemacs-sync-mode t)
    (gsetq lsp-metals-treeview-show-when-views-received t))
#+end_src
