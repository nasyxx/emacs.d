#+PROPERTY: header-args:emacs-lisp :tangle (concat temporary-file-directory "擊鼓.el") :lexical t
#+title: 擊鼓

#+begin_verse
  國風・邶風・擊鼓

  擊鼓其鏜、踊躍用兵
  土國城漕、我獨南行

  從孫子仲、平陳與宋
  不我以歸、憂心有忡

  爰居爰處、爰喪其馬
  于以求之、于林之下

  死生契闊、與子成說
  執子之手、與子偕老

  于嗟闊兮、不我活兮
  于嗟洵兮、不我信兮
#+end_verse

必要組件之于 Emacs 啓勭

* 題                                                :noexport:

#+begin_src emacs-lisp :exports none
  ;;; 擊鼓.el --- Nasy's emacs.d init bootstrap file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;----------------------------------------------------------------------------
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; 蔓艸/擊鼓/篇.org
  ;;
  ;; You should make any changes there and regenerate using make generate.
  ;;----------------------------------------------------------------------------

  ;;; Commentary:

  ;; 必要組件之于 Emacs 啓勭

  ;;; Code:
#+end_src

* 叙

以 raxod502 之 [[https://github.com/raxod502/straight.el][straight.el]] 載入包以 conao3 之 [[https://github.com/conao3/leaf.el][leaf.el]] 引用包

* 初 ~early-init~

#+begin_src emacs-lisp
  (eval-and-compile
    (unless (boundp '*nasy*)
      (load (locate-user-emacs-file"early-init.el") nil 'nomessage)))
#+end_src

#+include: ./初.org

* 整置文件                                       :convenience:

#+begin_src emacs-lisp
  (eval-and-compile
    (with-no-warnings
      (customize-set-variable
       'abbrev-file-name
       (concat *nasy-etc* "abbrev.el") "Customized by Nasy.")
      (customize-set-variable
       'auto-save-list-file-prefix
       (concat *nasy-var* "auto-save/sessions/") "Customized by Nasy.")
      (customize-set-variable
       'auto-save-file-name-transforms
       `((".*" ,(concat *nasy-var* "auto-save/") t))
        "Customized by Nasy.")
      (customize-set-variable
       'bookmark-default-file
       (concat *nasy-var* "bookmarks.el") "Customized by Nasy.")
      (customize-set-variable
       'eshell-aliases-file
       (concat *nasy-etc* "eshell/aliases") "Customized by Nasy.")
      (customize-set-variable
       'eshell-directory-name
       (concat *nasy-var* "eshell/") "Customized by Nasy.")
      (customize-set-variable
       'save-place-file
       (concat *nasy-var* "save-place.el") "Customized by Nasy.")
      (customize-set-variable
       'svg-lib-icons-dir
       (concat *nasy-var* "svg-lib/") "Customized by Nasy.")
      (customize-set-variable
       'tramp-auto-save-directory
       (concat *nasy-var* "tramp/auto-save/") "Customized by Nasy.")
      (customize-set-variable
       'tramp-persistency-file-name
       (concat *nasy-var* "tramp/persistency.el") "Customized by Nasy.")
      (customize-set-variable
       'url-cache-directory
       (concat *nasy-var* "url/cache/") "Customized by Nasy.")
      (customize-set-variable
       'url-configuration-directory
       (concat *nasy-var* "url/configuration/") "Customized by Nasy.")))
#+end_src

* straight

#+begin_src emacs-lisp
  (eval-and-compile
    (with-no-warnings
      (setq straight-vc-git-default-clone-depth     1
            straight-repository-branch              "develop"
            straight-enable-use-package-integration nil
            straight-check-for-modifications        nil))
    (defvar bootstrap-version)

    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  (eval-and-compile
    (require 'cl))

  (defun nasy/-s-u-p (package)
    "Handle special PACKAGE var."
    (if (boundp package)
        (when (eval package)
          (straight-use-package (eval package)))
      (straight-use-package package)))


  (defun nasy/sup (&rest packages-sets)
    "Straight use multiple PACKAGES-SETS."
    (cl-loop for packages-set in packages-sets
             when (not (null packages-set))
             do
             (cl-loop for package in packages-set
                      do
                      (cond ((symbolp package)
                             (nasy/-s-u-p package))
                            ((listp package)
                             (dolist (p package)
                               (nasy/-s-u-p p)))
                            (t (error "???"))))))


  (cl-eval-when (compile eval load)
    (defmacro sup (&rest body)
      `(progn
         (cl-eval-when (compile eval load)
           (straight-use-package ,@body))
         (if nasy--require
             (cl-eval-when (compile eval load)
               (if (symbolp ,@body)
                   (require ,@body nil t)
                 (require (car ,@body) nil t)))
           (cl-eval-when (compile)
             (if (symbolp ,@body)
                 (require ,@body nil t)
               (require (car ,@body) nil t)))))))
#+end_src

* Elpaca

https://github.com/progfolio/elpaca

Elpaca is an elisp package manager. It allows users to find, install, update, and remove third-party packages for Emacs. It is a replacement for the built-in Emacs package manager, package.el.

#+begin_src emacs-lisp
  ;; (eval-and-compile
  ;;   (declare-function elpaca-generate-autoloads "elpaca")
  ;;   (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  ;;   (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  ;;   (when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
  ;;              (elpaca-build (expand-file-name "elpaca/" elpaca-builds-directory))
  ;;              (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
  ;;              (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
  ;;              ((add-to-list 'load-path elpaca-target))
  ;;              ((not (file-exists-p elpaca-repo)))
  ;;              (buffer (get-buffer-create "*elpaca-bootstrap*")))
  ;;     (condition-case-unless-debug err
  ;;         (progn
  ;;           (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
  ;;             (error "%s" (list (with-current-buffer buffer (buffer-string)))))
  ;;           (byte-recompile-directory elpaca-repo 0 'force)
  ;;           (require 'elpaca)
  ;;           (elpaca-generate-autoloads "elpaca" elpaca-repo)
  ;;           (kill-buffer buffer))
  ;;       ((error)
  ;;        (delete-directory elpaca-directory 'recursive)
  ;;        (with-current-buffer buffer
  ;;          (goto-char (point-max))
  ;;          (insert (format "\n%S" err))
  ;;          (display-buffer buffer)))))
  ;;   (require 'elpaca-autoloads)
  ;;   (add-hook 'after-init-hook #'elpaca-process-queues)
  ;;   (elpaca (elpaca :host github :repo "progfolio/elpaca")))
#+end_src

* 餘

#+begin_src emacs-lisp
  (sup 'leaf)
  (sup 'leaf-keywords)
  (sup 'use-package)
#+end_src

* Leaf

#+begin_src emacs-lisp
  (eval-and-compile
    (setq leaf-defaults '(:leaf-autoload nil :leaf-defun nil))
    (leaf-keywords-init))

  (defun nasy/-package-filter (name &rest _)
    "Ignore package NAME if *no-packages* is t."
    (let ((sym (intern (format "*no-%s*" name))))
      (if (and (boundp sym) sym)
          (progn
            (message "Ignore package: %s" name)
            nil)
        t)))

  (advice-add 'leaf :before-while #'nasy/-package-filter)
#+end_src

* use-package

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+end_src

* 包之墬阯 ~load-path~

以 ~straight~ 載入本墬包即可。

#+begin_src emacs-lisp
  ;; (defmacro nasy/local-repo (repo &rest body)
  ;;   "Nasy load local REPO."
  ;;   (let ((n-repo (symbol-name repo)))
  ;;     `(sup
  ;;       '(,(intern n-repo)
  ;;         ,@body
  ;;         :build nil
  ;;         :local-repo ,(expand-file-name
  ;;                       (format "桃夭/%s" (symbol-name repo))
  ;;                       user-emacs-directory)))))

  (defmacro nasy/config-path (config)
    "Nasy CONFIG path."
    (locate-user-emacs-file
     (format "桃夭/%s" (symbol-name config))))


  (defmacro nasy/extra-repo (repo &optional path &rest body)
    "Nasy extra local site-lisp REPO."
    (let ((path (or path (symbol-name repo))))
      `(sup
        '(,repo
          ,@body
          :local-repo ,(locate-user-emacs-file
                        (format "木瓜/%s" path))))))


  (defmacro nasy/-repo (repo &rest body)
    "Nasy extra local site-lisp REPO."
    (let ((path (symbol-name repo)))
      `(sup
        '(,repo
          ,@body
          :local-repo ,(locate-user-emacs-file
                        (format "木瓜/nasy/%s" path))))))
#+end_src

* melpa/elpa 之外

#+begin_src emacs-lisp
  (cl-eval-when (compile eval load)
    (straight-register-package
     '(keytar :type git
              :host github
              :repo "emacs-grammarly/keytar"))

    (straight-register-package
     '(point-history :type git
                     :host github
                     :repo "blue0513/point-history"))

    (straight-register-package
     '(vundo :type git
             :host github
             :repo "casouri/vundo")))
#+end_src

* 載入

#+begin_src emacs-lisp
  (sup 'org)
  (sup 'org-contrib)
  (sup 'gcmh)
#+end_src

** 自定義

例子~芄蘭之例~、个人配置~芄蘭~與自定義~custom-file~

肰定義 ~custom-file~ 于此並無載入之意苟欲載入置 ~(load custom-file)~ 于个
人配置 ~芄蘭~ 之內。

#+begin_src emacs-lisp
  (cl-eval-when (compile eval load)
    (add-to-list 'load-path *nasy-custom*))

  (require '芄蘭)
#+end_src

** 自定義例

#+include: ./芄蘭之例.org

* 清汙薉                                             :internal:

以 ~gcmh~ 管理汙薉

** GCMH                                              :internal:

Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection.

https://gitlab.com/koral/gcmh

#+begin_src emacs-lisp
  (leaf gcmh
    :doc "Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection."
    :url "https://gitlab.com/koral/gcmh"
    :tag "internal"
    :defun gcmh-mode
    :hook (nasy-first-key-hook . nasy/-start-gcmh)
    :init (sup 'gcmh))

  (defun nasy/-start-gcmh (&rest _)
    "Start GCMH."
    (when (and (not noninteractive)
               (not (and (boundp '*no-gcmh*)
                       ,*no-gcmh*)))
      (customize-set-variable
       'gcmh-verbose t
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-low-cons-threshold #x2000000  ;; 32MB
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-high-cons-threshold #x8000000 ;; 128MB
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-idle-delay 360
       "Customized with leaf in `gcmh' block")
      (gcmh-mode 1)))
#+end_src

* 結                                                :noexport:

#+begin_src emacs-lisp :exports none
  (provide '擊鼓)
  ;;; 擊鼓.el ends here
#+end_src
