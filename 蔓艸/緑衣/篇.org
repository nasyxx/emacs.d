#+PROPERTY: header-args:emacs-lisp :tangle (concat temporary-file-directory "緑衣.el") :lexical t
#+title: 緑衣

#+begin_verse
  國風・邶風・緑衣

  緑兮衣兮、緑衣黃裹
  心之憂矣、曷維其已

  緑兮衣兮、緑衣黃裳
  心之憂矣、曷維其亡

  緑兮絲兮、女所治兮
  我恖古人、俾無訧兮

  絺兮綌兮、淒其以風
  我恖古人、實獲我心
#+end_verse

永不弃者載入于初始之時也

Permanent configuration file.

You cannot disable anything here.

* 題                                                :noexport:

#+begin_src emacs-lisp :exports none
  ;;; 緑衣.el --- Nasy's emacs.d permanent file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; 永不弃者載入于初始之時也

  ;;; Code:
  (cl-eval-when (compile)
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/擊鼓"))
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/風雨"))
    (require '擊鼓)
    (require '風雨)
    (require '風雨時用)
    (require 'crm)
    (require 'dired)
    (require 'tempo)
    (require 'xref)

    (sup 'avy t)
    (sup 'consult t)
    (sup 'embark-consult t)
    (sup 'embark t)
    (sup 'flycheck t)
    (sup 'page-break-lines t)
    (sup 'projectile t)
    (sup 'recentf t)
    (sup '(emacs-session
           :repo "https://git.sr.ht/~nasy/emacs-session"
           :type git
           :host nil)
         'session)
    (sup 'vertico t)
    (sup 'which-key t))
#+end_src

* 章

** Anzu                                          :search:tools:

anzu.el is an Emacs port of anzu.vim. anzu.el provides a minor mode which
displays current match and total matches information in the mode-line in various
search modes.

https://github.com/emacsorphanage/anzu

#+begin_src emacs-lisp
  (setup anzu
    (:doc "anzu.el is an Emacs port of anzu.vim.")
    (:url "https://github.com/emacsorphanage/anzu")
    (:tag "search" "tools")
    (:first-key global-anzu-mode)
    (:global
     [remap query-replace]        anzu-query-replace
     [remap query-replace-regexp] anzu-query-replace-regexp))
#+end_src

** Avy                                         :point:location:

Jump to things in Emacs tree-style.

https://github.com/abo-abo/avy

#+begin_src emacs-lisp
  (setup avy
    (:doc "Jump to things in Emacs tree-style.")
    (:url "https://github.com/abo-abo/avy")
    (:tag "point" "location")
    (:opt
     avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s)) ;; for dvorak
    (:global
     "C-;"     avy-goto-char
     "C-:"     avy-goto-char-2
     ;; "C-'"     avy-goto-char-2
     ;; "C-`"     avy-goto-char-2
     "M-g e"   avy-goto-word-0
     "M-g w"   avy-goto-word-1
     ;; "C-~"     avy-goto-word-1
     "C-c C-j" avy-resume))
#+end_src

** Beginend                                           :editing:

Emacs package to redefine M-< and M-> for some modes

https://github.com/DamienCassou/beginend

#+begin_src emacs-lisp
  (setup beginend
    (:doc "Emacs package to redefine M-< and M-> for some modes")
    (:url "https://github.com/DamienCassou/beginend")
    (:tag "editing")
    (:first-key beginend-global-mode))
#+end_src

** Compile                                            :builtin:

#+begin_src emacs-lisp
  (defvar nasy/last-compilation-buffer nil
    "The last buffer in which compilation took place.")

  (defun nasy/save-compilation-buffer (&rest _)
    "Save the compilation buffer to find it later."
    (setq nasy/last-compilation-buffer next-error-last-buffer))

  (defun alert-after-compilation-finish (buf result)
    "Use `alert' to report compilation RESULT if BUF is hidden."
    (when (buffer-live-p buf)
      (unless (catch 'is-visible
                (walk-windows (lambda (w)
                                (when (eq (window-buffer w) buf)
                                  (throw 'is-visible t))))
                nil)
        (alert (concat "Compilation " result)
               :buffer buf
               :category 'compilation
               :title "Emacs"))))

  (setup compile
    (:tag "builtin")
    (:advice compilation-start :after nasy/save-compilation-buffer)
    (:global [f6] recompile)
    (:with-hook compilation-finish-functions (:hook alert-after-compilation-finish)))
#+end_src

** Consult                                         :extensions:

consult.el - Consulting completing-read.

https://github.com/minad/consult

Include consult & consult-flycheck.

*** consult

#+begin_src emacs-lisp
  (defun nasy/consult-line-symbol-at-point ()
    "Consult line with symbol at point."
    (interactive)
    (consult-line (thing-at-point 'symbol)))

  (setup consult
    (:doc "consult.el - Consulting completing-read")
    (:url "https://github.com/minad/consult")
    (:tag "extensions")
    (:load-first vertico)
    (:opt
     consult-narrow-key "C-.")
    (:with-hook completion-list-mode-hook
      (:hook consult-preview-at-point-mode))
    (:global
     [remap switch-to-buffer]              consult-buffer
     [remap switch-to-buffer-other-window] consult-buffer-other-window
     [remap switch-to-buffer-other-frame]  consult-buffer-other-frame

     [remap bookmark-jump]      consult-bookmark
     [remap goto-line]          consult-goto-line
     [remap imenu]              consult-imenu
     [remap multi-occur]        consult-line-multi
     [remap recentf-open-files] consult-recent-file
     [remap yank-pop]           consult-yank-replace

      "C-s"   consult-line
      "C-S-s" nasy/consult-line-symbol-at-point)
    (:when-loaded
      (:require consult-xref)
      (consult-customize
       consult-theme
       :preview-key '("M-."
                      :debounce 3 "<up>" "<down>"
                      :debounce 1 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-recent-file consult--source-project-recent-file
       consult--source-bookmark consult-buffer
       :preview-key '("M-."
                      :debounce 5 "<up>" "<down>"
                      :debounce 5 any))))
#+end_src

*** consult-flycheck

#+begin_src emacs-lisp
  (setup consult-flycheck
    (:doc "consult.el - Consulting completing-read")
    (:url "https://github.com/minad/consult")
    (:tag "extensions")
    (:load-first consult)
    (:bind-into flycheck-command-map
      "!" consult-flycheck))
#+end_src

*** consult-dir                                    :convenience:

Consult-dir allows you to easily select and switch between “active”
directories.

https://github.com/karthink/consult-dir

#+begin_src emacs-lisp
  (setup consult-dir
    (:doc "consult-dir: switch directories easily in Emacs")
    (:url "https://github.com/karthink/consult-dir")
    (:tag "convenience")
    (:load-first consult)
    (:global
     "C-x C-d" consult-dir)
    (:bind-into minibuffer-local-completion-map
      "C-x C-d" consult-dir
      "C-x C-j" consult-dir-jump-file)
    (:after vertico
      (:bind-into vertico-map
        "C-x C-d" consult-dir
        "C-x C-j" consult-dir-jump-file)))
#+end_src

** Dired                                                :files:

DiredMode is the mode of a Dired buffer.  It shows a directory (folder) listing
that you can use to perform various operations on files and subdirectories in
the directory. The operations you can perform are numerous, from creating
subdirectories to byte-compiling files, searching files, and of course visiting
(editing) files.

https://www.emacswiki.org/emacs/DiredMode

#+begin_src emacs-lisp
  (setup dired
    (:doc "DiredMode is the mode of a Dired buffer.")
    (:url "https://www.emacswiki.org/emacs/DiredMode")
    (:tag "files")
    (:bind-into dired-mode-map
      [mouse-2] dired-find-file
      "C-c C-p" wdired-change-to-wdired-mode)
    (:opt
     insert-directory-program (or (executable-find "gls")
                                  (executable-find "ls"))
     dired-recursive-deletes 'top))
#+end_src

** Easy Kill                              :killing:convenience:

Provide commands easy-kill and easy-mark to let users kill or mark things easily.

https://github.com/leoliu/easy-kill

#+begin_src emacs-lisp
  (setup easy-kill
    (:doc "Kill & Mark Things Easily in Emacs.")
    (:url "https://github.com/leoliu/easy-kill")
    (:tag "killing" "convenience")
    (:global
     [remap kill-ring-save] easy-kill
     [remap mark-sexp]      easy-mark))
#+end_src

** Eldoc                           :builtin:docs:help:

#+begin_src emacs-lisp
  (setup eldoc
    (:opt eldoc-documentation-strategy #'eldoc-documentation-compose
          eldoc-echo-area-use-multiline-p t))
#+end_src

** Emacs Spatial Navigate                             :editing:

Spatial navigation in Emacs.

https://gitlab.com/ideasman42/emacs-spatial-navigate

#+begin_src emacs-lisp
  (setup spatial-navigate
    (:doc "Spatial navigation in Emacs.")
    (:url "https://gitlab.com/ideasman42/emacs-spatial-navigate")
    (:tag "editing")
    (:global "<C-p>" spatial-navigate-backward-vertical-bar
             "<C-n>" spatial-navigate-forward-vertical-bar
             "<M-b>" spatial-navigate-backward-horizontal-bar
             "<M-f>" spatial-navigate-forward-horizontal-bar
             "<M-up>" spatial-navigate-backward-vertical-box
             "<M-down>" spatial-navigate-forward-vertical-box
             "<H-left>" spatial-navigate-backward-horizontal-box
             "<H-right>" spatial-navigate-forward-horizontal-box))
#+end_src

** embark                                         :convenience:

Emacs Mini-Buffer Actions Rooted in Keymaps.

https://github.com/oantolin/embark/

#+begin_src emacs-lisp
  (defun embark-act-noquit ()
    "Run action but don't quit the minibuffer afterwards."
    (interactive)
    (let ((embark-quit-after-action nil))
      (embark-act)))

  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
   The which-key help message will show the type and value of the
   current target followed by an ellipsis if there are further
   targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (defun embark-live-vertico ()
    "Shrink Vertico minibuffer when `embark-live' is active."
    (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                        (active-minibuffer-window)))
      (with-selected-window win
        (when (and (bound-and-true-p vertico--input)
                   (fboundp 'vertico-multiform-unobtrusive))
          (vertico-multiform-unobtrusive)))))

  (setup embark
    (:doc "Emacs Mini-Buffer Actions Rooted in Keymaps.")
    (:url "https://github.com/oantolin/embark")
    (:tag "convenience")
    (:load-first vertico consult embark-consult)
    (:global
     [remap describe-bindings] embark-bindings
     "C-," embark-dwim)
    (:bind-into embark-file-map
      "s" sudo-edit)
    (:after vertico
      (:bind-into vertico-map
        "M-o" embark-act)
      (add-to-list 'embark-indicators #'embark-which-key-indicator))
    (:after 風雨時用
      (:bind-into nasy/active-region-map
        "M-o" embark-act))
    (:with-mode embark-collect-mode
      (:hook embark-live-vertico))
    (:when-loaded
      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none))))))


  (setup embark-consult
    (:load-first consult)
    (:with-mode embark-collect-mode
      (:hook consult-preview-at-point-mode)))
#+end_src

** Flycheck                       :convenience:languages:tools:

Modern on-the-fly syntax checking extension for GNU Emacs.

[[https://www.flycheck.org/][flycheck.org]]

https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
  (setup flycheck
    (:doc "On the fly syntax checking for GNU Emacs.")
    (:url "https://github.com/flycheck/flycheck")
    (:tag "convenience" "languages" "tools")
    (:hook-into prog-mode)
    (:opt
     flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list
     flycheck-check-syntax-automatically '(save idle-change mode-enabled)
     flycheck-display-errors-delay       0.25)
    (:bind-into flycheck-error-list-mode-map
      "C-n" flycheck-error-list-next-error
      "C-p" flycheck-error-list-previous-error
      "RET" flycheck-error-list-goto-error
      [return]  flycheck-error-list-goto-error)
    (:when-loaded
     (add-to-list 'display-buffer-alist
                  `(,(rx bos "*Flycheck errors*" eos)
                    (display-buffer-reuse-window
                     display-buffer-in-side-window)
                    (side            . bottom)
                    (reusable-frames . visible)
                    (window-height   . 0.33)))
     (defalias 'show-error-at-point-soon
       'flycheck-show-error-at-point)
     (add-to-list 'flycheck-emacs-lisp-checkdoc-variables 'sentence-end-double-space)))
#+end_src

** GCMH                                              :internal:

以 ~gcmh~ 管理汙薉

Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection.

https://gitlab.com/koral/gcmh

#+begin_src emacs-lisp
  (defun nasy/-start-gcmh (&rest _)
    "Start GCMH."
    (when (and (not noninteractive)
               (not (and (boundp '*no-gcmh*)
                       ,*no-gcmh*)))
      (customize-set-variable
       'gcmh-verbose t
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-low-cons-threshold #x2000000  ;; 32MB
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-high-cons-threshold #x8000000 ;; 128MB
       "Customized with leaf in `gcmh' block")
      (customize-set-variable
       'gcmh-idle-delay 360
       "Customized with leaf in `gcmh' block")
      (gcmh-mode 1)))

  ;; (use-package gcmh
  ;;   :doc "Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection."
  ;;   :url "https://gitlab.com/koral/gcmh"
  ;;   :tag "internal"
  ;;   :commands gcmh-mode
  ;;   :hook (nasy-first-key . nasy/-start-gcmh))

  (setup gcmh
    (:doc "Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection.")
    (:url "https://gitlab.com/koral/gcmh")
    (:tag "internal")
    (:first-key nasy/-start-gcmh))
#+end_src

** Grep                                               :builtin:

#+begin_src emacs-lisp
  (setup grep
    (:tag "builtin")
    (:opt
     grep-highlight-matches t
     grep-scroll-output     t))
#+end_src

** Helpful                                          :help:lisp:

A better Emacs *help* buffer.

https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
  (setup helpful
    (:doc "A better Emacs *help* buffer.")
    (:url "https://github.com/Wilfred/helpful")
    (:tag "help" "lisp")
    (:global
     "C-c d" helpful-at-point
     [remap describe-function] helpful-callable
     [remap describe-variable] helpful-variable
     [remap describe-key]      helpful-key))
#+end_src

*** elisp-demos

#+begin_src emacs-lisp
  (setup elisp-demos
    (:doc "Demonstrate Emacs Lisp APIs.")
    (:url "https://github.com/xuchunyang/elisp-demos")
    (:tag "lisp" "docs")
    (:advice helpful-update :after elisp-demos-advice-helpful-update))
#+end_src

** Keyfreq                               :extensions:utilities:

Track Emacs commands frequency

https://github.com/dacap/keyfreq

#+begin_src emacs-lisp
  (setup keyfreq
    (:doc "Track Emacs commands frequency")
    (:url "https://github.com/dacap/keyfreq")
    (:tag "extensions" "utilities")
    (:opt
     keyfreq-file (concat *nasy-var* "keyfreq")
     keyfreq-excluded-commands
     '(backward-char
       dap-tooltip-mouse-motion
       delete-backward-char
       execute-extended-command
       forward-char
       keyboard-quit
       kill-buffer
       left-char
       minibuffer-keyboard-quit
       mouse-drag-region
       mouse-set-point
       move-beginning-of-line
       move-end-of-line
       next-line
       org-delete-backward-char
       org-end-of-line
       org-return
       org-self-insert-command
       pixel-scroll-precision
       previous-line
       previous-line
       right-char
       right-word
       save-buffer
       selectrum-next-candidate
       selectrum-select-current-candidate
       self-insert-command
       yank))
    (:hook-into nasy-first-key-hook)
    (:mode-hook (keyfreq-autosave-mode 1)))
#+end_src

** marginalia                                      :extensions:

marginalia.el - Marginalia in the minibuffer

https://github.com/minad/marginalia

#+begin_src emacs-lisp
  (setup marginalia
    (:doc "marginalia.el - Marginalia in the minibuffer.")
    (:url "https://github.com/minad/marginalia")
    (:tag "extensions")
    (:load-first vertico)
    (:when-loaded (marginalia-mode 1))
    (:bind-into minibuffer-local-map
      "M-a" marginalia-cycle))
#+end_src

#+begin_src emacs-lisp
  (setup all-the-icons-completion
    (:with-mode marginalia-mode
      (:hook all-the-icons-completion-marginalia-setup)))
#+end_src

** Orderless                                       :extensions:

This package provides an orderless completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order. Each component can match in
any one of several ways: literally, as a regexp, as an initialism, in
the flex style, or as multiple word prefixes. By default, regexp and
literal matches are enabled.

https://github.com/oantolin/orderless

#+begin_src emacs-lisp
  (defun nasy/-orderless-dispatch (pattern _index _total)
    "Orderless (PATTERN) dispatch.

   Recognizes the following patterns:
   ,* ~flex flex~
   ,* =literal literal=
   ,* `initialism initialism`
   ,* !without-literal without-literal!
   ,* .ext (file extension)
   ,* regexp$ (regexp matching at end)"
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern) `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x100000-\x10FFFD]*$")))
     ;; File extensions
     ((string-match-p "\\`\\.." pattern) `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x100000-\x10FFFD]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Without literal
     ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
     ((string-suffix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 0 -1)))
     ;; Initialism matching
     ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
     ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
     ;; Literal matching
     ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
     ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
     ;; Flex matching
     ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
     ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))


  (setup orderless
    (:doc "Emacs completion style that matches multiple regexps in any order.")
    (:url "https://github.com/oantolin/orderless")
    (:tag "extensions")
    (:first-key* (require 'orderless))
    (:opt
     completion-styles '(orderless initials basic)
     orderless-matching-styles '(orderless-regexp
                                 orderless-initialism
                                 orderless-literal)
     orderless-style-dispatchers   '(nasy/-orderless-dispatch)
     orderless-component-separator "[ &·]"
     completion-category-defaults  nil
     completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Page Break Lines                         :convenience:faces:

This Emacs library provides a global mode which displays ugly form feed
characters as tidy horizontal rules.

https://github.com/purcell/page-break-lines

#+begin_src emacs-lisp
  (setup page-break-lines
    (:doc "Emacs: display ugly ^L page breaks as tidy horizontal lines")
    (:url "https://github.com/purcell/page-break-lines")
    (:tag "convenience" "faces")
    (:with-hook nasy/font-change-hook
      (:hook (lambda ()
               (progn
                 (after-x 'page-break-lines
                   (nasy/change-char-width page-break-lines-char 2)
                   (nasy/set-symbol ?⊸ 18 nil))))))
    (:opt page-break-lines-char ?⊸))
#+end_src

** Parens                      :faces:languages:parens:builtin:

#+begin_src emacs-lisp
  (setup paren
    (:tag "builtin")
    (:opt show-paren-context-when-offscreen t)
    (:first-key show-paren-mode))
#+end_src

** Projectile                             :convenience:project:

Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

https://github.com/bbatsov/projectile

#+begin_src emacs-lisp
  (setup projectile
    (:doc "Projectile is a project interaction library for Emacs.")
    (:url "https://github.com/bbatsov/projectile")
    (:tag "project" "convenience")
    (:global [remap find-tag] projectile-find-tag)
    (:opt
     projectile-known-projects-file (concat *nasy-var* "projectile/known-projects.el")
     projectile-indexing-method          'hybrid
     projectile-require-project-root     'prompt
     projectile-ignored-project-function #'nasy/p-ignore-p)
    (:when-loaded
      (setq projectile-project-root-files-top-down-recurring
             (append '("compile_commands.json"
                       ".cquery")
                     projectile-project-root-files-top-down-recurring))))
#+end_src

** Recentf                                              :files:

Recentf is a minor mode that builds a list of recently opened files.

https://www.emacswiki.org/emacs/RecentFiles

#+begin_src emacs-lisp
  (defvar nasy--recentf-cleaned nil)

  (setup recentf
    (:doc "Recentf is a minor mode that builds a list of recently opened files.")
    (:url "https://www.emacswiki.org/emacs/RecentFiles")
    (:tag "files")
    (:global "C-c r" recentf-open-files)
    (:first-key*
     (recentf-mode))
    (:mode-hook
     (after-x '風雨時用
       (unless nasy--recentf-cleaned
         (setq nasy--recentf-cleaned t)
         (recentf-cleanup))))
    (:opt*
     recentf-save-file (concat *nasy-var* "recentf-save.el")

     recentf-filename-handlers
     '(;; Text properties inflate the size of recentf's files, and there is
       ;; no purpose in persisting them, so we strip them out.
       substring-no-properties
       ;; Resolve symlinks of local files. Otherwise we get duplicate
       ;; entries opening symlinks.
       nasy/file-truename
       ;; Keep some symlinks
       nasy/file-sym-t
       ;; Replace $HOME with ~, which is more portable, and reduces how much
       ;; horizontal space the recentf listing uses to list recent files.
       abbreviate-file-name)

      recentf-auto-cleanup    'never
      recentf-max-saved-items 1000

      recentf-exclude
      `(,(abbreviate-file-name
          (locate-user-emacs-file *nasy-var*))
        "/tmp/" "/ssh:" "/nix/store" "~/.nix/store" "/private/var/folders"
        ,(locate-user-emacs-file "straight"))))
#+end_src

** Savehist                                           :history:

#+begin_src emacs-lisp
  (setup savehist
    (:hook-into nasy-first-key-hook)
    (:opt
     kill-ring-max              300
     history-length             3000
     history-delete-duplicates  t
     savehist-autosave-interval 3600
     savehist-file (concat *nasy-var* "savehist.el")
     savehist-additional-variables '(mark-ring
                                     global-mark-ring
                                     search-ring
                                     regexp-search-ring
                                     extended-command-history)))
#+end_src

** Sessions                                           :history:

#+begin_src emacs-lisp
  (setup session
    (:autoload session-initialize session-save-session)
    (:with-hook aftre-init-hook
      (:hook session-initialize))
    (:with-hook after-save-hook
      (:hook session-save-session))
    (:opt* session-save-file (concat *nasy-var* "session"))
    (:opt
     session-name-disable-regexp     "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)"
     session-save-file-coding-system 'utf-8
     desktop-globals-to-save
     '((comint-input-ring        . 50)
       (compile-history          . 30)
       desktop-missing-file-warning
       (dired-regexp-history     . 20)
       (extended-command-history . 30)
       (face-name-history        . 20)
       (file-name-history        . 100)
       (grep-find-history        . 30)
       (grep-history             . 30)
       (ivy-history              . 100)
       (magit-revision-history   . 50)
       (minibuffer-history       . 50)
       (org-clock-history        . 50)
       (org-refile-history       . 50)
       (org-tags-history         . 50)
       (query-replace-history    . 60)
       (read-expression-history  . 60)
       (regexp-history           . 60)
       (regexp-search-ring       . 20)
       register-alist
       (search-ring              . 20)
       (shell-command-history    . 50)
       tags-file-name
       tags-table-list
       kill-ring)))
#+end_src

** Subword                                            :builtin:

#+begin_src emacs-lisp
  (setup subword
    (:tag "builtin")
    (:hook-into prog-mode-hook))
#+end_src

** Sudo Edit                                      :convenience:

Utilities for opening files with sudo

https://github.com/nflath/sudo-edit

#+begin_src emacs-lisp
  (setup sudo-edit
    (:doc "Utilities for opening files with sudo.")
    (:url "https://github.com/nflath/sudo-edit")
    (:tag "convenience"))
#+end_src

** switch-window                                  :convenience:

Offer a *visual* way to choose a window to switch to.

https://github.com/dimitri/switch-window

#+begin_src emacs-lisp
  (setup switch-window
    (:doc "Offer a *visual* way to choose a window to switch to.")
    (:url "https://github.com/dimitri/switch-window")
    (:tag "convenience")
    (:global
     "C-c 1" toggle-delete-other-windows
     "C-c 2" split-window--v
     "C-c 3" split-window--h
     "C-x |" split-window-horizontally-instead
     "C-x _" split-window-vertically-instead
     "C-x o" switch-window
     "C-c x" nasy/split-window
     "M-o"   other-window)
    (:opt
     ;; for dvorak layout
     switch-window-qwerty-shortcuts
     '("a" "o" "e" "u" "h" "t" "n" "s" "i" "d"
       ";" "," "." "p" "y" "f" "g" "c" "l"
       "'" "q" "j" "k" "x" "b" "m")
     switch-window-shortcut-style 'qwerty))
#+end_src

** Tempo                                              :builtin:

#+begin_src emacs-lisp
  (setup tempo
    (:tag "builtin")
    (:autoload tempo-define-template))
#+end_src

** transient                                         :bindings:

Taking inspiration from prefix keys and prefix arguments, Transient
implements a similar abstraction involving a prefix command, infix
arguments and suffix commands. We could call this abstraction a
"transient command", but because it always involves at least two
commands (a prefix and a suffix) we prefer to call it just a
"transient".

https://magit.vc/manual/transient

https://github.com/magit/transient

#+begin_src emacs-lisp
  (setup transient
    (:doc "Transient commands.")
    (:url "https://github.com/magit/transient")
    (:tag "bindings")
    (:opt
     transient-history-file (concat *nasy-var* "transient/history.el")
     transient-levels-file  (concat *nasy-etc* "transient/levels.el")
     transient-values-file  (concat *nasy-etc* "transient/values.el"))
    (:init (add-to-list 'nasy--defer-loads 'transient)))
#+end_src

** Treesit

#+begin_src emacs-lisp
  (defun na/treesit-install-language-grammar (lang)
    "Build and install the tree-sitter language grammar library for LANG.

   Interactively, if `treesit-language-source-alist' doesn't already
   have data for building the grammar for LANG, prompt for its
   repository URL and the C/C++ compiler to use.

   This command requires Git, a C compiler and (sometimes) a C++ compiler,
   and the linker to be installed and on PATH.  It also requires that the
   recipe for LANG exists in `treesit-language-source-alist'.

   See `exec-path' for the current path where Emacs looks for
   executable programs, such as the C/C++ compiler and linker."
    (interactive (list (intern
                        (completing-read
                         "Language: "
                         (mapcar #'car treesit-language-source-alist)))))
    (when-let ((recipe
                (or (assoc lang treesit-language-source-alist)
                    (treesit--install-language-grammar-build-recipe
                     lang))))
      (condition-case err
          (apply #'treesit--install-language-grammar-1
                 ;; The nil is OUT-DIR.
                 (cons (car treesit-extra-load-path) recipe))
        (error
         (display-warning
          'treesit
          (format "Error encountered when installing language grammar: %s"
                  err)))))

    ;; Check that the installed language grammar is loadable.
    (pcase-let ((`(,available . ,err)
                 (treesit-language-available-p lang t)))
      (when (not available)
        (display-warning
         'treesit
         (format "The installed language grammar for %s cannot be located or has problems (%s): %s"
                 lang (nth 0 err)
                 (string-join
                  (mapcar (lambda (x) (format "%s" x))
                          (cdr err))
                  " "))))))

  (setup treesit
    (:opt treesit-font-lock-level 4)
    (:when-loaded
     (add-to-list 'treesit-extra-load-path
                  (concat *nasy-var* "treesit")))
    (:advice
     treesit-install-language-grammar :override na/treesit-install-language-grammar))

  (setup treesit-auto
    (:opt treesit-auto-install 'prompt)
    (:first-key*
     (require 'treesit-auto)
     (add-to-list 'treesit-auto-fallback-alist '(bash-ts-mode . sh-mode))
     (add-to-list 'treesit-auto-fallback-alist '(toml-ts-mode . conf-toml-mode))
     (global-treesit-auto-mode)))
#+end_src

** Unfill                                         :convenience:

Functions providing the inverse of Emacs' fill-paragraph and fill-region

https://github.com/purcell/unfill

#+begin_src emacs-lisp
  (setup unfill
    (:doc "Functions providing the inverse of Emacs' fill-paragraph and fill-region")
    (:url "https://github.com/purcell/unfill")
    (:tag "convenience")
    (:global "M-q" unfill-toggle))
#+end_src

** Uniquify                                     :builtin:files:

#+begin_src emacs-lisp
  (setup uniquify
    (:tag "builtin" "files")
    (:opt
     uniquify-buffer-name-style   'reverse
     uniquify-separator           " • "
     uniquify-after-kill-buffer-p t
     uniquify-ignore-buffers-re   "^\\*"))
#+end_src

** valign                              :convenience:table:text:

这个包能对齐 Org Mode、Markdown和table.el 的表格。它能对齐包含不等宽字
体、中日韩字符、图片的表格。valign 不会影响 Org Mode（或 Markdown mode）
基于等宽字符的对齐。  (注：目歬不在 org-mode 中启用)

This package provides visual alignment for Org Mode, Markdown and
table.el tables on GUI Emacs. It can properly align tables containing
variable-pitch font, CJK characters and images. Meanwhile, the
text-based alignment generated by Org mode (or Markdown mode) is left
untouched.

https://github.com/casouri/valign

#+begin_src emacs-lisp
  (setup valign
    (:doc "Pixel-perfect visual alignment for Org and Markdown tables.")
    (:url "https://github.com/casouri/valign")
    (:tag "convenience" "table" "text")
    (:hook-into markdown-mode-hook))
#+end_src

** vc-mode                                                 :vc:

#+begin_src emacs-lisp
  (setup vc
    (:first-key vc-mode))
#+end_src

** Vertico                              :completion:extensions:

Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system. The main focus of Vertico is
to provide a UI which behaves correctly under all circumstances. By
reusing the built-in facilities system, Vertico achieves full
compatibility with built-in Emacs completion commands and completion
tables. Vertico only provides the completion UI but aims to be highly
flexible, extensible and modular. Additional enhancements are
available as extensions or complementary packages. The code base is
small and maintainable. The main vertico.el package is only about 600
lines of code without white space and comments.

https://github.com/minad/vertico

#+begin_src emacs-lisp
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))

  (setup vertico
    (:doc "Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.")
    (:url "https://github.com/minad/vertico")
    (:tag "completion")
    (:advice completing-read-multiple :filter-args crm-indicator)
    (:bind-into vertico-map
      "M-<DEL>" vertico-directory-delete-word)
    (:first-key* (vertico-mode 1))
    (:with-hook minibuffer-setup-hook
      (:hook vertico-repeat-save))
    (:mode-hook
     (vertico-mouse-mode 1)
     (after-x '風雨時用
       (nasy/active-region-mode 1))))
#+end_src

** View Large File                 :files:largefiles:utilities:

Emacs minor mode that allows viewing, editing, searching and comparing large
files in batches, trading memory for processor time.

https://github.com/m00natic/vlfi

#+begin_src emacs-lisp
  (defun ffap-vlf ()
    "Find file at point with VLF."
    (interactive)
    (let ((file (ffap-file-at-point)))
      (unless (file-exists-p file)
        (error "File does not exist: %s" file))
      (vlf file)))

  (setup vlf
    (:doc "View Large Files in Emacs")
    (:url "https://github.com/m00natic/vlfi")
    (:tag "files" "large files" "utilities")
    (:autoload ffap-vlf))
#+end_src

** wgrep                              :editing:extensions:grep:

wgrep allows you to edit a grep buffer and apply those changes to the
file buffer like sed interactively. No need to learn sed script, just
learn Emacs.

https://github.com/mhayashi1120/Emacs-wgrep

#+begin_src emacs-lisp
  (setup wgrep
    (:doc "Writable grep buffer and apply the changes to files.")
    (:url "https://github.com/mhayashi1120/Emacs-wgrep")
    (:tag "editing" "extensions" "grep"))
#+end_src

** Which Function                                     :builtin:

#+begin_src emacs-lisp
  (setup which-func
    (:tag "builtin")
    (:first-key which-function-mode))
#+end_src

** Whitespace                             :convenience:data:wp:

Visualize blanks (TAB, (HARD) SPACE and NEWLINE).

https://www.emacswiki.org/emacs/WhiteSpace

In Emacs, intelligently call whitespace-cleanup on save.

https://github.com/purcell/whitespace-cleanup-mode

#+begin_src emacs-lisp
  (defun no-trailing-whitespace ()
    "Turn off display of trailing whitespace in this buffer."
    (setq show-trailing-whitespace nil))

  (setup whitespace
    (:tag "data" "wp")
    (:with-function no-trailing-whitespace
      (:hook-into
       ;; But don't show trailing whitespace in SQLi, inf-ruby etc.
       artist-mode-hook
       picture-mode-hook
       special-mode-hook
       Info-mode-hook
       eww-mode-hook
       term-mode-hook
       vterm-mode-hook
       comint-mode-hook
       compilation-mode-hook
       twittering-mode-hook
       minibuffer-setup-hook
       fundamental-mode-hook)))

  (setup whitespace-cleanup-mode
    (:doc "In Emacs, intelligently call whitespace-cleanup on save.")
    (:url "https://github.com/purcell/whitespace-cleanup-mode")
    (:tag "convonience")
    (:opt
     whitespace-cleanup-mode-only-if-initially-clean nil
     whitespace-style
     '(face trailing tabs spaces newline
            missing-newline-at-eof empty indentation
            space-after-tab space-before-tab
            space-mark tab-mark newline-mark))
    (:hook-into text-mode-hook prog-mode-hook)
    (:global "<remap> <just-one-space>" cycle-spacing))
#+end_src

** xref                                               :builtin:

#+begin_src emacs-lisp
  (setup xref
    (:opts
     ((xref-show-xrefs-function
       xref-show-definitions-function)
      . #'xref-show-definitions-completing-read)))
#+end_src

* 結                                                :noexport:

#+begin_src emacs-lisp :exports none
  (provide '緑衣)
  ;;; 緑衣.el ends here
#+end_src

# Local Variables:
# org-src-fontify-natively: nil
# End:
