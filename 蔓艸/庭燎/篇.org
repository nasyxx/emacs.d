#+PROPERTY: header-args:emacs-lisp :tangle (concat temporary-file-directory "庭燎.el") :lexical t
#+title: 庭燎

#+begin_verse
  小雅・彤弓之什・庭燎

  夜如何其、夜未央、庭燎之光
  君子至止、鸞聲將將

  夜如何其、夜未艾、庭燎皙皙
  君子至止、鸞聲噦噦

  夜如何其、夜郷晨、庭燎有煇
  君子至止、言觀其旂
#+end_verse

容皃也

UI

* 題                                                :noexport:

#+begin_src emacs-lisp :exports none
  ;;; 庭燎.el --- Nasy's emacs.d UI file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; 容皃也

  ;;; Code:
  (cl-eval-when (compile)
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/擊鼓"))
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/風雨"))
    (require '擊鼓)
    (require '風雨)
    (require '風雨時用)

    (require 'cal-china)

    (sup 'cal-china-x t)
    (sup 'centaur-tabs t)
    (sup 'dashboard t)
    (sup 'dash t)
    (sup 'nerd-icons t)
    (sup 'treemacs t))
#+end_src

* 章

** Calendar

Also cal-china-x

This extension mainly adds the following extra features:

+ Chinese localizations
+ Display holiday, lunar(农历), horoscope(星座), zodiac(属相、十二生肖), solar term(节气) info on mode line
+ Define holidays using holiday-lunar, holiday-solar-term
+ Highlight holidays based on different priorities
+ Add cal-china-x-chinese-holidays, cal-china-x-japanese-holidays.
+ Custom week diary (like weeks in school)

https://github.com/xwl/cal-china-x

#+begin_src emacs-lisp
  (defun nasy/chinese-date-string (date)
    "Nasy version calendar string of DATE."
    (let* ((cn-date (calendar-chinese-from-absolute
                     (calendar-absolute-from-gregorian date)))
           (cn-year  (cadr   cn-date))
           (cn-month (cl-caddr  cn-date))
           (cn-day   (cl-cadddr cn-date)))
      (format "黃帝%s%s%s%s%s%s(%s)"
              (+ 2698 (calendar-extract-year date))
              (calendar-chinese-sexagesimal-name cn-year)
              ;; (aref cal-china-x-zodiac-name (% (1- cn-year) 12))
              (aref cal-china-x-month-name (1-  (floor cn-month)))
              (if (integerp cn-month) "" "(闰月)")
              (aref cal-china-x-day-name (1- cn-day))
              (cal-china-x-get-solar-term date)
              (cal-china-x-get-horoscope (car date) (cadr date)))))


  (defun nasy/init-chinese-calendar ()
    "Initial Chinese calendar."
    (setq calendar-date-display-form
          '((cal-china-x-calendar-display-form
             (mapcar (lambda (el) (string-to-number el))
                     (list month day year)))))

    (setq diary-date-forms chinese-date-diary-pattern)

    (setq calendar-chinese-celestial-stem cal-china-x-celestial-stem
          calendar-chinese-terrestrial-branch cal-china-x-terrestrial-branch)

    ;; (setq calendar-month-header '(propertize (format "%d年%2d月" year month)
    ;;                                          'font-lock-face
    ;;                                          'calendar-month-header))

    (when cal-china-x-force-chinese-week-day
      (setq calendar-day-header-array cal-china-x-days))

    (setq calendar-mode-line-format
          (list
           (calendar-mode-line-entry 'calendar-scroll-right "previous month" "<")
           ;; "日曆"

           '(cal-china-x-get-holiday date)

           '(concat " " (calendar-date-string date t)
                    (format " 第%d周"
                            (funcall (if cal-china-x-custom-week-start-date
                                         'cal-china-x-custom-week-of-date
                                       'cal-china-x-week-of-date)
                                     date)))

           '(nasy/chinese-date-string date)

           ;; " "

           ;; (concat
           ;;  (calendar-mode-line-entry 'calendar-goto-info-node "read Info on Calendar"
           ;;                            nil "info")
           ;;  " / "
           ;;  (calendar-mode-line-entry 'calendar-other-month "choose another month"
           ;;                            nil "other")
           ;;  " / "
           ;;  (calendar-mode-line-entry 'calendar-goto-today "go to today's date"
           ;;                            nil "today"))

           (calendar-mode-line-entry 'calendar-scroll-left "next month" ">")))

    (add-hook 'calendar-move-hook 'calendar-update-mode-line)
    (add-hook 'calendar-initial-window-hook 'calendar-update-mode-line)

    (add-hook 'calendar-mode-hook
              (lambda ()
                (set (make-local-variable 'font-lock-defaults)
                     ;; chinese month and year
                     '((("[0-9]+年\\ *[0-9]+月" . font-lock-function-name-face)) t))))


    (advice-add 'calendar-mark-holidays :around 'cal-china-x-mark-holidays)
    (advice-add 'mouse-set-point :after 'cal-china-x-mouse-set-point))


  (setup calendar
    (:customs
     ;; 爾雅 月名
     ((calendar-chinese-month-name-array cal-china-x-month-name)
      . ["陬月" "如月" "寎月" "余月" "皋月" "且月"
         "相月" "壯月" "玄月" "陽月" "辜月" "涂月"])))


  (setup cal-china-x
    (:doc "chinese localization, prioritized holiday highlight, lunar, horoscope, zodiac, etc.")
    (:url "https://github.com/xwl/cal-china-x")
    (:tag "calendar" "date")
    (:opt
     cal-china-x-force-chinese-week-day t
     cal-china-x-always-show-jieqi      t)
    (:first-key
     (lambda ()
       (progn
         (require 'calendar)
         (require 'cal-china-x)
         (nasy/init-chinese-calendar)))))

#+end_src

** Centaur Tab

This projects aims to become an aesthetic, functional and efficient
tabs plugin for Emacs with a lot of customization options.

https://github.com/ema2159/centaur-tabs

#+begin_src emacs-lisp
  (setup centaur-tabs
    (:advice centaur-tabs-buffer-groups :override nasy/-centaur-tabs-buffer-groups)
    (:opt
     centaur-tabs-style "wave")
    (:with-hook nasy/font-change-hook
      (:hook (lambda () (nasy/set-symbol ?⏺ 14)))))


  (defun nasy/-enable-centaur-tabs-local-mode ()
    (unless centaur-tabs-mode
      (centaur-tabs-mode 1))
    (centaur-tabs-local-mode 1))

  (defun nasy/-disable-centaur-tabs-local-mode ()
    (unless centaur-tabs-mode
      (centaur-tabs-mode 1))
    (centaur-tabs-local-mode -1))


  (defvar nasy--centaur-text-modes
    '(org-mode org-agenda-mode org-agenda-clockreport-mode
               org-agenda-log-mode org-beamer-mode
               org-bullets-mode org-cdlatex-mode
               org-indent-mode org-src-mode diary-mode
               text-mode markdown-mode))

  (defvar nasy--centaur-vc-modes
    '(magit-blame-mode magit-blob-mode magit-diff-mode
                       magit-file-mode magit-log-mode
                       magit-process-mode magit-status-mode))


  (defun nasy/-centaur-tabs-buffer-groups ()
    "Nasy's centaur tabs groups."
    (let ((bn (buffer-name)))
      (list
       (cond
        ;; org, markdown & text
        ((or (memq major-mode nasy--centaur-text-modes)
             (string-prefix-p "*Org Src" bn)
             (string-prefix-p "*Org Export" bn))
         "書寫")

        ;; VC
        ((memq major-mode nasy--centaur-vc-modes)
         "Magit")

        ;; Shell
        ((memq major-mode '(eshell-mode shell-mode vterm-mode))
         "Shell")

        ;; Info & Help
        ((memq major-mode '(help-mode info-mode helpful-mode))
         "注")

        ;; programming
        ((derived-mode-p 'prog-mode)
         "編程")

        ;; Web Page
        ((or (memq major-mode '(eww-mode xwidget-webkit-mode))
             (string-prefix-p "*xwidget webkit" bn))
         "網頁")

        ;; Emacs
        ((string-prefix-p "*" bn)
         "虛")

        ;; 雜
        (t (centaur-tabs-get-group-name (current-buffer)))))))


  (setup centaur-tabs
    (:quit)
    (:opt
     centaur-tabs-set-modified-marker t
     centaur-tabs-height     28
     centaur-tabs-bar-height 30
     centaur-tabs-set-close-button      nil
     centaur-tabs-enable-ido-completion nil)
    (:first-key nasy/-disable-centaur-tabs-local-mode)
    (:mode-hook
     ;; (centaur-tabs-headline-match)

     (customize-set-variable 'centaur-tabs-set-icons t
                             "Customized by Nasy in `centaur-tabs' block")
     (customize-set-variable 'centaur-tabs-show-navigation-buttons t
                             "Customized by Nasy in `centaur-tabs' block")
     (setq centaur-tabs-active-bar
           (centaur-tabs--make-xpm 'centaur-tabs-active-bar-face
                                  4
                                  centaur-tabs-bar-height))))

#+end_src

** Dashboard

#+begin_src emacs-lisp
  (setup dashboard
    (:autoload dashboard-refresh-buffer
               dashboard-setup-startup-hook))


  (defun nasy/-set-dashboard-init-info (&rest _)
    (setq dashboard-init-info
          (let ((package-count 0) (time (emacs-init-time)))
            (setq package-count (+ (hash-table-size straight--profile-cache) package-count))
            (if (zerop package-count)
                (format "Emacs started in %s" time)
              (format "%d packages loaded in %s" package-count time)))))


  (defun nasy/-dashboard-items (_)
    (insert "\n       ")
    (widget-create 'item
                   :tag "近期 (r)"
                   :action #'consult-recent-file
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀯛 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open recent files")
    (insert "\t")
    (widget-create 'item
                   :tag "書籤 (b)"
                   :action #'consult-bookmark
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉚 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open bookmarks")
    (insert "\t")
    (widget-create 'item
                   :tag "項目 (p)"
                   :action #'projectile-switch-project
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉹  "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open projects")
    (insert "\n\n       ")
    (widget-create 'item
                   :tag "草稿 (c)"
                   :action #'persistent-scratch-restore
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀤑 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "restore scratch buffer")
    (insert "\t")
    (widget-create 'item
                   :tag "議程 (a)"
                   :action #'org-agenda
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀮝 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "Org Agenda")
    (insert "\t")
    (widget-create 'item
                   :tag "日曆 (d)"
                   :action #'calendar
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉉 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open calendar")
    (insert "\n\n       ")
    (widget-create 'item
                   :tag "芄蘭 (C)"
                   :action #'nasy/-open-custom
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀍟 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open custom file")
    (insert "\t")
    (widget-create 'item
                   :tag "源碼 (s)"
                   :action #'nasy/-open-source-page
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀧎 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open https://github.com/nasyxx/emacs.d/")
    (insert "\t")
    (widget-create 'item
                   :tag "文檔 (D)"
                   :action #'nasy/-open-document
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉅  "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open https://emacs.nasy.moe")
    (insert "\n\n"))


  (defun nasy/dashboard-refresh ()
    "Refresh dashboard buffer."
    (interactive)
    (unless (get-buffer dashboard-buffer-name)
      (generate-new-buffer "*dashboard*"))
    (dashboard-refresh-buffer))


  (declare-function persistent-scratch-restore "persistent-scratch")


  (setup dashboard
    (:global
     "<f5>" dashboard-refresh-buffer)
    (:bind-into dashboard-mode-map
     "r"              consult-recent-file
     "b"              consult-bookmark
     "p"              projectile-switch-project
     "c"              persistent-scratch-restore
     "a"              org-agenda
     "d"              calendar
     "C"              nasy/-open-custom
     "s"              nasy/-open-source-page
     "D"              nasy/-open-document
     "g"              dashboard-refresh-buffer
     "<down-mouse-1>" nil
     "H-p"            dashboard-previous-line
     "H-n"            dashboard-next-line
     "H-b"            widget-backward
     "H-f"            widget-forward
     "<mouse-1>"      widget-button-click
     "<mouse-2>"      widget-button-click
     "<up>"           widget-backward
     "<down>"         nasy/wfw1
     [remap previous-line] widget-backward
     [remap next-line]     nasy/wfw1)
    (:hooks
     dashboard-mode-hook (lambda () (setq-local tab-width 1))
     after-init-hook     dashboard-setup-startup-hook
     after-init-hook     dashboard-refresh-buffer)
     ;; nasy/font-change-hook (lambda ()
     ;;                         (progn
     ;;                           (nasy/set-apple-symbol ?🌓)
     ;;                           (nasy/set-apple-symbol ?🔖)
     ;;                           (nasy/set-apple-symbol ?🚀)
     ;;                           (nasy/set-apple-symbol ?📝)
     ;;                           (nasy/set-apple-symbol ?🗓)
     ;;                           (nasy/set-apple-symbol ?📅)
     ;;                           (nasy/set-apple-symbol ?⚙)
     ;;                           (nasy/set-apple-symbol ?🍭)
     ;;                           (nasy/set-apple-symbol ?📖))))
    (:opt*
     dashboard-items '((n-items . t))
                       ;; (bookmarks . t)
                       ;; (registers . 5)
                       ;; (agenda    . 5)
                       ;; (projects  . 7))))
     dashboard-item-generators '((n-items . nasy/-dashboard-items))
     dashboard-startup-banner  (concat *nasy-etc* "n_icon.png"))
    (:opts*
     ((dashboard-center-content
       dashboard-set-heading-icons
       dashboard-set-init-info)
      . t))
    (:advice dashboard-refresh-buffer :before nasy/-set-dashboard-init-info))
#+end_src

** doom Theme

#+begin_src emacs-lisp
  (setup doom-themes
    (:first-key* (require 'doom-themes))
    (:opt
     doom-dracula-brighter-comments t
     doom-dracula-colorful-headers  t
     doom-dracula-comment-bg        t
     ;; doom-themes-treemacs-theme "doom-colors"
     doom-themes-org-fontify-special-tags nil)
    (:when-loaded
     ;; (after-x 'treemacs
     ;;   (doom-themes-treemacs-config))
     ;; (doom-themes-visual-bell-config)
     (after-x 'org
       (doom-themes-org-config))))
#+end_src

** Icons                                                :icons:

以 nerd font 显眎圖幖

#+begin_src emacs-lisp
  (setup nerd-icons
    (:after kind-icon
      (:opt
       kind-icon-use-icons nil
       kind-icon-mapping
       `((array          ,(nerd-icons-codicon "nf-cod-symbol_array")       :face font-lock-type-face)
         (boolean        ,(nerd-icons-codicon "nf-cod-symbol_boolean")     :face font-lock-builtin-face)
         (class          ,(nerd-icons-codicon "nf-cod-symbol_class")       :face font-lock-type-face)
         (color          ,(nerd-icons-codicon "nf-cod-symbol_color")       :face success)
         (command        ,(nerd-icons-codicon "nf-cod-terminal")           :face default)
         (constant       ,(nerd-icons-codicon "nf-cod-symbol_constant")    :face font-lock-constant-face)
         (constructor    ,(nerd-icons-codicon "nf-cod-triangle_right")     :face font-lock-function-name-face)
         (enummember     ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
         (enum-member    ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
         (enum           ,(nerd-icons-codicon "nf-cod-symbol_enum")        :face font-lock-builtin-face)
         (event          ,(nerd-icons-codicon "nf-cod-symbol_event")       :face font-lock-warning-face)
         (field          ,(nerd-icons-codicon "nf-cod-symbol_field")       :face font-lock-variable-name-face)
         (file           ,(nerd-icons-codicon "nf-cod-symbol_file")        :face font-lock-string-face)
         (folder         ,(nerd-icons-codicon "nf-cod-folder")             :face font-lock-doc-face)
         (interface      ,(nerd-icons-codicon "nf-cod-symbol_interface")   :face font-lock-type-face)
         (keyword        ,(nerd-icons-codicon "nf-cod-symbol_keyword")     :face font-lock-keyword-face)
         (macro          ,(nerd-icons-codicon "nf-cod-symbol_misc")        :face font-lock-keyword-face)
         (magic          ,(nerd-icons-codicon "nf-cod-wand")               :face font-lock-builtin-face)
         (method         ,(nerd-icons-codicon "nf-cod-symbol_method")      :face font-lock-function-name-face)
         (function       ,(nerd-icons-codicon "nf-cod-symbol_method")      :face font-lock-function-name-face)
         (module         ,(nerd-icons-codicon "nf-cod-file_submodule")     :face font-lock-preprocessor-face)
         (numeric        ,(nerd-icons-codicon "nf-cod-symbol_numeric")     :face font-lock-builtin-face)
         (operator       ,(nerd-icons-codicon "nf-cod-symbol_operator")    :face font-lock-comment-delimiter-face)
         (param          ,(nerd-icons-codicon "nf-cod-symbol_parameter")   :face default)
         (property       ,(nerd-icons-codicon "nf-cod-symbol_property")    :face font-lock-variable-name-face)
         (reference      ,(nerd-icons-codicon "nf-cod-references")         :face font-lock-variable-name-face)
         (snippet        ,(nerd-icons-codicon "nf-cod-symbol_snippet")     :face font-lock-string-face)
         (string         ,(nerd-icons-codicon "nf-cod-symbol_string")      :face font-lock-string-face)
         (struct         ,(nerd-icons-codicon "nf-cod-symbol_structure")   :face font-lock-variable-name-face)
         (text           ,(nerd-icons-codicon "nf-cod-text_size")          :face font-lock-doc-face)
         (typeparameter  ,(nerd-icons-codicon "nf-cod-list_unordered")     :face font-lock-type-face)
         (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered")     :face font-lock-type-face)
         (unit           ,(nerd-icons-codicon "nf-cod-symbol_ruler")       :face font-lock-constant-face)
         (value          ,(nerd-icons-codicon "nf-cod-symbol_field")       :face font-lock-builtin-face)
         (variable       ,(nerd-icons-codicon "nf-cod-symbol_variable")    :face font-lock-variable-name-face)
         (t              ,(nerd-icons-codicon "nf-cod-code")               :face font-lock-warning-face)))))

  (setup nerd-icons-ibuffer
    (:hook-into ibuffer-mode-hook))

  (setup nerd-icons-completion
    (:first-key nerd-icons-completion-mode))

  (setup treemacs-nerd-icons
    (:after* treemacs
      (:require treemacs-nerd-icons)
      (treemacs-load-theme "nerd-icons")))
#+end_src

** Pretty Mode                                         :pretty:

#+begin_src emacs-lisp
  ;; https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
  (defun nasy/adjust-fira-code-symbol (charset &optional size)
    (let ((size (or size 14)))
      (set-fontset-font (frame-parameter nil 'font)
                        charset
                        (font-spec :family "Fira Code Symbol"
                                   :weight 'normal
                                   :size   size))))
  ;; I haven't found one statement that makes both of the above situations work, so I use both for now
  (defun pretty-fonts-set-fontsets (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified `CODE-FONT-ALIST'."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
          (set-fontset-font nil `(,it . ,it) font)
          (set-fontset-font t `(,it . ,it) font)))))

  (defun pretty-fonts--add-kwds (FONT-LOCK-ALIST)
    "Exploits `font-lock-add-keywords'(`FONT-LOCK-ALIST') to apply regex-unicode replacements."
    (font-lock-add-keywords
     nil (--map (-let (((rgx uni-point) it))
                 `(,rgx (0 (progn
                             (compose-region
                              (match-beginning 1) (match-end 1)
                              ,(concat "\t" (list uni-point)))
                             nil))))
               FONT-LOCK-ALIST)))

  (defmacro pretty-fonts-set-kwds (FONT-LOCK-HOOKS-ALIST)
    "Set regex-unicode replacements to many modes(`FONT-LOCK-HOOKS-ALIST')."
    `(--each ,FONT-LOCK-HOOKS-ALIST
       (-let (((font-locks . mode-hooks) it))
         (--each mode-hooks
           (add-hook it (-partial 'pretty-fonts--add-kwds
                                  (symbol-value font-locks)))))))

  (defconst pretty-fonts-fira-font
    '(;; OPERATORS
      ;; Pipes
      ("\\(<|\\)" #Xe14d) ("\\(<>\\)" #Xe15b) ("\\(<|>\\)" #Xe14e) ("\\(|>\\)" #Xe135)

      ;; Brackets
      ("\\(<\\*\\)" #Xe14b) ("\\(<\\*>\\)" #Xe14c) ("\\(\\*>\\)" #Xe104)
      ("\\(<\\$\\)" #Xe14f) ("\\(<\\$>\\)" #Xe150) ("\\(\\$>\\)" #Xe137)
      ("\\(<\\+\\)" #Xe155) ("\\(<\\+>\\)" #Xe156) ("\\(\\+>\\)" #Xe13a)

      ;; Equality
      ("\\(!=\\)" #Xe10e) ("\\(!==\\)"         #Xe10f) ("\\(=/=\\)" #Xe143)
      ("\\(/=\\)" #Xe12c) ("\\(/==\\)"         #Xe12d)
      ("\\(===\\)" #Xe13d) ("[^!/]\\(==\\)[^>]" #Xe13c)

      ;; Equality Special
      ("\\(||=\\)"  #Xe133) ("[^|]\\(|=\\)" #Xe134)
      ("\\(~=\\)"   #Xe166)
      ("\\(\\^=\\)" #Xe136)
      ("\\(=:=\\)"  #Xe13b)

      ;; Comparisons
      ("\\(<=\\)" #Xe141) ("\\(>=\\)" #Xe145)
      ("\\(</\\)" #Xe162) ("\\(</>\\)" #Xe163)

      ;; Shifts
      ("[^-=]\\(>>\\)" #Xe147) ("\\(>>>\\)" #Xe14a)
      ("[^-=]\\(<<\\)" #Xe15c) ("\\(<<<\\)" #Xe15f)

      ;; Dots
      ("\\(\\.-\\)"    #Xe122) ("\\(\\.=\\)" #Xe123)
      ("\\(\\.\\.<\\)" #Xe125)

      ;; Hashes
      ("\\(#{\\)"  #Xe119) ("\\(#(\\)"   #Xe11e) ("\\(#_\\)"   #Xe120)
      ("\\(#_(\\)" #Xe121) ("\\(#\\?\\)" #Xe11f) ("\\(#\\[\\)" #Xe11a)

      ;; REPEATED CHARACTERS
      ;; 2-Repeats
      ("\\(||\\)" #Xe132)
      ("\\(!!\\)" #Xe10d)
      ("\\(%%\\)" #Xe16a)
      ("\\(&&\\)" #Xe131)

      ;; 2+3-Repeats
      ("\\(##\\)"       #Xe11b) ("\\(###\\)"          #Xe11c) ("\\(####\\)" #Xe11d)
      ("\\(--\\)"       #Xe111) ("\\(---\\)"          #Xe112)
      ("\\({-\\)"       #Xe108) ("\\(-}\\)"           #Xe110)
      ("\\(\\\\\\\\\\)" #Xe106) ("\\(\\\\\\\\\\\\\\)" #Xe107)
      ("\\(\\.\\.\\)"   #Xe124) ("\\(\\.\\.\\.\\)"    #Xe126)
      ("\\(\\+\\+\\)"   #Xe138) ("\\(\\+\\+\\+\\)"    #Xe139)
      ("\\(//\\)"       #Xe12f) ("\\(///\\)"          #Xe130)
      ("\\(::\\)"       #Xe10a) ("\\(:::\\)"          #Xe10b)

      ;; ARROWS
      ;; Direct
      ("[^-]\\(->\\)" #Xe114) ("[^=]\\(=>\\)" #Xe13f)
      ("\\(<-\\)"     #Xe152)
      ("\\(-->\\)"    #Xe113) ("\\(->>\\)"    #Xe115)
      ("\\(==>\\)"    #Xe13e) ("\\(=>>\\)"    #Xe140)
      ("\\(<--\\)"    #Xe153) ("\\(<<-\\)"    #Xe15d)
      ("\\(<==\\)"    #Xe158) ("\\(<<=\\)"    #Xe15e)
      ("\\(<->\\)"    #Xe154) ("\\(<=>\\)"    #Xe159)

      ;; Branches
      ("\\(-<\\)"  #Xe116) ("\\(-<<\\)" #Xe117)
      ("\\(>-\\)"  #Xe144) ("\\(>>-\\)" #Xe148)
      ("\\(=<<\\)" #Xe142) ("\\(>>=\\)" #Xe149)
      ("\\(>=>\\)" #Xe146) ("\\(<=<\\)" #Xe15a)

      ;; Squiggly
      ("\\(<~\\)" #Xe160) ("\\(<~~\\)" #Xe161)
      ("\\(~>\\)" #Xe167) ("\\(~~>\\)" #Xe169)
      ("\\(-~\\)" #Xe118) ("\\(~-\\)"  #Xe165)

      ;; MISC
      ("\\(www\\)"                   #Xe100)
      ("\\(<!--\\)"                  #Xe151)
      ("\\(~@\\)"                    #Xe164)
      ("[^<]\\(~~\\)"                #Xe168)
      ("\\(\\?=\\)"                  #Xe127)
      ("[^=]\\(:=\\)"                #Xe10c)
      ("\\(/>\\)"                    #Xe12e)
      ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
      ("[^:=]\\(:\\)[^:=]"           #Xe16c)
      ("\\(<=\\)"                    #Xe157))
    "Fira font ligatures and their regexes.")
#+end_src

#+begin_src emacs-lisp
  (setup pretty-mode
    (:with-hook nasy/font-change-hook
      (:hook
       (lambda ()
         (progn
           (when (display-graphic-p)
             (set-fontset-font (frame-parameter nil 'font)
                               '(#Xe100 . #Xe16f)
                               "Fira Code Symbol")
             (nasy/adjust-fira-code-symbol #Xe126 15))))))
    (:when-loaded
      (when (fboundp 'mac-auto-operator-composition-mode)
        (mac-auto-operator-composition-mode))
      (after-x 'dash
        (pretty-fonts-set-kwds
         '((pretty-fonts-fira-font prog-mode-hook org-mode-hook))))))
#+end_src

#+begin_src emacs-lisp
  ;; (setup pretty-mode
  ;;   (:with-hook nasy/font-change-hook
  ;;     (:hook
  ;;      (lambda ()
  ;;        (progn
  ;;          (nasy/set-symbol ?ℂ 13 'bold)
  ;;          (nasy/set-symbol ?𝕔 16)
  ;;          (nasy/set-symbol ?𝔻 13 'bold)
  ;;          (nasy/set-symbol ?𝕕 14)
  ;;          (nasy/set-symbol ?𝕃 13 'bold)
  ;;          (nasy/set-symbol ?𝕝 14) ;; with   (1/4 space)
  ;;          (nasy/set-symbol ?ℝ 12 'bold)
  ;;          (nasy/set-symbol ?𝕣 18)
  ;;          (nasy/set-symbol ?𝕋 14 'bold)
  ;;          (nasy/set-symbol ?𝕥 19)
  ;;          (nasy/set-symbol ?ℤ 13 'bold)
  ;;          (nasy/set-symbol ?𝕫 16)
  ;;          (nasy/set-symbol ?∑ 11 'bold)
  ;;          (nasy/set-symbol ?∏ 11 'bold)
  ;;          (nasy/set-symbol ?∅ 11 'bold)
  ;;          (nasy/set-symbol ?⋃ 11 'bold))))))
  (setup pretty-mode
    (:with-hook prog-mode-hook
      (:hook
       (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
                   '(;; Data Type             P N
                     ("Float"  . #x211d)  ;; ℝxxxx
                     ("float"  . #x211d)  ;; ℝxxx
                     ("Int"    . #x2124)  ;; ℤxxx
                     ("int"    . #x2124)  ;; ℤxxx
                     ;; ("String" . #x1d57e)  ;; 𝕊 𝕾
                     ;; ("string" . #x1d598)  ;; 𝕤 𝖘
                     ;; ("str"    . #x1d598)  ;; 𝕤 𝖘
                     ("String" . (#x1d54a (Br . Bl) #x2006))  ;; 𝕊 xxxxxx
                     ("string" . (#x1d54a (Br . Bl) #x2006))  ;; 𝕤 xxxxxx x1d564
                     ("str"    . (#x1d54a (Br . Bl) #x2006))  ;; 𝕤 xxxx
                     ("Char"   . #x2102)   ;; ℂx
                     ("char"   . #x1d554)  ;; 𝕔x

                     ("False"  . #x1d53d)  ;; 𝔽 𝕱
                     ("True"   . #x1d54b)  ;; 𝕋 𝕿

                     ("Any"    . #x2203)  ;; ∃
                     ("any"    . #x2203)  ;; ∃
                     ("any_"   . #x2203)  ;; ∃
                     ("And"    . (#x2000 (Br . Bl) #x22c0 (Br . Bl) #x2005))  ;; ⋀
                     ("and"    . (#x2004 (Br . Bl) #x22cf (Br . Bl) #x2004 (Br . Bl) #x2009))  ;; ⋏
                     ("Or"     . #x22c1)  ;; ⋁
                     ("or"     . (#x2006 (Br . Bl) #x22cE (Br . Bl) #x2009))  ;; ⋎
                     ("not"    . #x00ac)  ;; ¬
                     ("not_"   . #x00ac)  ;; ¬

                     ("All"    . #x2200)  ;; ∀
                     ("all"    . #x2200)  ;; ∀
                     ("all_"   . #x2200)  ;; ∀
                     ("for"    . #x2200)  ;; ∀
                     ("forall" . #x2200)  ;; ∀
                     ("forM"   . #x2200)  ;; ∀

                     ("pi"     . #x03c0)  ;; π

                     ("sum"    . #x2211)  ;; ∑
                     ("Sum"    . #x2211)  ;; ∑
                     ("Product" . #x220F) ;; ∏
                     ("product" . #x220F) ;; ∏

                     ("None"   . #x2205)  ;; ∅
                     ("none"   . #x2205)  ;; ∅

                     ("in"     . (#x2006 (Br . Bl) #x2208 (Br . Bl) #x2009 (Br . Bl) #x2009))  ;;  ∈  
                     ("`elem`" . (#x2006 (Br . Bl) #x2208 (Br . Bl) #x2009 (Br . Bl) #x2009))  ;;  ∈  
                     ("not in"    . (#x2006 (Br . Bl) #x2209 (Br . Bl) #x2009 (Br . Bl) #x2009))  ;;  ∉  
                     ("`notElem`" . (#x2006 (Br . Bl) #x2209 (Br . Bl) #x2009 (Br . Bl) #x2009))  ;;  ∉  
                     ("return" . (#x21d2 (Br . Bl) #x2005 ))  ;; ⇒  x (Br . Bl) #x2006
                     ("yield"  . (#x21d4 (Br . Bl) #x2004))  ;; ⇔ x xxxxxxxxxxxxxxxxx
                     ("pure"   . (#x21f0 (Br . Bl)))))))))          ;; ⇰ x
  (setup pretty-mode
    (:with-hook (prog-mode-hook
                 emacs-lisp-mode-hook
                 org-mode-hook)
      (:hook
       (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
                   '(;; Global
                     ;; Pipes
                     ("<|"  . (?\s (Br . Bl) #Xe14d))
                     ("<>"  . (?\s (Br . Bl) #Xe15b))
                     ("<|>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14e))
                     ("|>"  . (?\s (Br . Bl) #Xe135))

                     ;; Brackets
                     ("<*"  . (?\s (Br . Bl) #Xe14b))
                     ("<*>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14c))
                     ("*>"  . (?\s (Br . Bl) #Xe104))
                     ("<$"  . (?\s (Br . Bl) #Xe14f))
                     ("<$>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe150))
                     ("$>"  . (?\s (Br . Bl) #Xe137))
                     ("<+"  . (?\s (Br . Bl) #Xe155))
                     ("<+>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe156))
                     ("+>"  . (?\s (Br . Bl) #Xe13a))
                     ("[]"  . (#x2005 (Br . Bl) #x1d731 (Br . Bl) #x2005))

                     ;; Equality
                     ("=/="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe143))
                     ("/="   . (?\s (Br . Bl) #Xe12c))
                     ("/=="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe12d))
                     ("/==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) #Xe13c))
                     ("!==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) #Xe13c))
                     ;; Special
                     ("||="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe133))
                     ("|="   . (?\s (Br . Bl) #Xe134))
                     ("~="   . (?\s (Br . Bl) #Xe166))
                     ("^="   . (?\s (Br . Bl) #Xe136))
                     ("=:="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe13b))

                     ;; Comparisons
                     ("</"   . (?\s (Br . Bl) #Xe162))
                     ("</>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe163))

                     ;; Shifts
                     ("=>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe147))
                     ("->>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe147))
                     (">>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14a))
                     (">>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14a))
                     ("=<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15c))
                     ("-<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15c))
                     ("<<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15f))

                     ;; Dots
                     (".-"   . (?\s (Br . Bl) #Xe122))
                     (".="   . (?\s (Br . Bl) #Xe123))
                     ("..<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe125))

                     ;; Hashes
                     ("#{"   . (?\s (Br . Bl) #Xe119))
                     ("#("   . (?\s (Br . Bl) #Xe11e))
                     ("#_"   . (?\s (Br . Bl) #Xe120))
                     ("#_("  . (?\s (Br . Bl) #Xe121))
                     ("#?"   . (?\s (Br . Bl) #Xe11f))
                     ("#["   . (?\s (Br . Bl) #Xe11a))

                     ;; REPEATED CHARACTERS
                     ;; 2-Repeats
                     ("!!"   . (?\s (Br . Bl) #Xe10d))
                     ("%%"   . (?\s (Br . Bl) #Xe16a))

                     ;; 2+3-Repeats
                     ("##"   . (?\s (Br . Bl) #Xe11b))
                     ("###"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe11c))
                     ("####" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe11d))
                     ("---"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe112))
                     ("{-"   . (?\s (Br . Bl) #Xe108))
                     ("-}"   . (?\s (Br . Bl) #Xe110))
                     ("\\\\" . (?\s (Br . Bl) #Xe106))
                     ("\\\\\\" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe107))
                     (".."   . (?\s (Br . Bl) #Xe124))
                     ("..."  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe126 (Br . Bl) #x200b))
                     ("+++"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe139))
                     ("//"   . (?\s (Br . Bl) #Xe12f))
                     ("///"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe130))
                     ("::"   . (?\s (Br . Bl) #Xe10a))  ;; 
                     (":::"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe10b))

                     ;; Arrows
                     ;; Direct
                     ("->"  . (?\s (Br . Bl) #Xe114))  ;; 
                     ("=>"  . (?\s (Br . Bl) #Xe13f))
                     ("->>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe115))
                     ("=>>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe140))
                     ("<<-" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15d))
                     ("<<=" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15e))
                     ("<->" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe154))
                     ("<=>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe159))
                     ;; Branches
                     ("-<"  . (?\s (Br . Bl) #Xe116))
                     ("-<<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe117))
                     (">-"  . (?\s (Br . Bl) #Xe144))
                     (">>-" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe148))
                     ("=<<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe142))
                     (">=>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe146))
                     (">>=" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe149))
                     ("<=<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15a))
                     ;; Squiggly
                     ("<~"  . (?\s (Br . Bl) #Xe160))
                     ("<~~" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe161))
                     ("~>"  . (?\s (Br . Bl) #Xe167))
                     ("~~>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe169))
                     ("-~"  . (?\s (Br . Bl) #Xe118))
                     ("~-"  . (?\s (Br . Bl) #Xe165))

                     ;; MISC
                     ("www" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe100))
                     ("~@"  . (?\s (Br . Bl) #Xe164))
                     ("~~"  . (?\s (Br . Bl) #Xe168))
                     ("?="  . (?\s (Br . Bl) #Xe127))
                     (":="  . (?\s (Br . Bl) #Xe10c))
                     ("/>"  . (?\s (Br . Bl) #Xe12e))))))))
  (setup pretty-mode
    (:with-hook python-base-mode-hook
      (:hook
       (lambda ()
         (mapc (lambda (pair) (push pair prettify-symbols-alist))
               '(;; Syntax
                 ;;("def"    . (#x1d521 (Br . Bl) #x1d522 (Br . Bl) #x1d523))
                 ("def"    . (#x1d487 (Br . Bl) #x2006))  ;; 𝒇 1 111
                 ("List"   . #x1d543)  ;; 𝕃 𝕷
                 ("list"   . (?𝕝 (Br . Bl) #x2006))  ;; 𝕝   𝖑
                 ("Dict"   . #x1d53B)  ;; 𝔻 𝕯
                 ("dict"   . #x1d555)  ;; 𝕕 𝖉
                 ("Set"    . #x1d61a)  ;; 𝔖 𝘚
                 ("set"    . #x1d634)  ;; 𝔰 𝘴
                 ("Tuple"  . #x1d61b)  ;; 𝕋 𝕿 𝘛
                 ("tuple"  . #x1d635)  ;; 𝕥 𝖙 𝘵

                 ("Union"  . #x22c3)  ;; ⋃
                 ("union"  . #x22c3))))))  ;; ⋃
    (:with-hook haskell-mode-hook
      (:hook
       (lambda ()
         (mapc (lambda (pair) (push pair prettify-symbols-alist))
               '(;; Syntax
                 ("pure" . (#x21f0 (Br . Bl) #x2006)))))) ;; ⇰  x
      ;; (" . "  . (?\s (Br . Bl) #x2218 (Br . Bl) ?\s (Br . Bl) #x2006)) ;; ∘
      ))
#+end_src

#+begin_src emacs-lisp
  (defvar nasy-prog-mode-first-key-hook nil)
  (defvar nasy--prog-mode-first-key-hook nil)

  (defun nasy/-load-prog-mode ()
    (setq nasy--prog-mode-first-key-hook nasy-prog-mode-first-key-hook)
    (nasy/run-hook-once-on 'nasy--prog-mode-first-key-hook 'pre-command-hook))

  (add-hook 'prog-mode-hook #'nasy/-load-prog-mode)

  (add-hook 'nasy-prog-mode-first-key-hook #'(lambda () (prettify-symbols-mode 1)))
#+end_src

** Mode Line

#+begin_src emacs-lisp
  (defun nasy/-start-display-time ()
    "Nasy start display time mode."
    (customize-set-variable 'display-time-24hr-format          t "Customized by Nasy.")
    (customize-set-variable 'display-time-day-and-date         t "Customized by Nasy.")
    (customize-set-variable 'display-time-load-average         nil "Customized by Nasy.")
    (customize-set-variable 'display-time-default-load-average nil "Customized by Nasy.")
    (display-time-mode 1))

  (add-hook 'nasy-first-key-hook #'nasy/-start-display-time)
#+end_src

#+begin_src emacs-lisp
  (setup nyan-mode
    (:opt
     nyan-animate-nyancat t
     nyan-bar-length      16
     nyan-wavy-trail      t)
    (:hook-into nasy-first-key-hook))
#+end_src

#+begin_src emacs-lisp
  (setup minions
    (:opt
     minions-mode-line-lighter "✬")
    (:hook-into nasy-first-key-hook))
#+end_src

#+begin_src emacs-lisp
  (setup doom-modeline
    (:hook-into emacs-startup-hook))

  (setup doom-modeline
    (:opt
     inhibit-compacting-font-caches   t
     doom-modeline-bar-width          5
     doom-modeline-window-width-limit fill-column
     doom-modeline-project-detection  'ffip  ;; changed
     doom-modeline-continuous-word-count-modes
     '(markdown-mode gfm-mode org-mode text-mode))
    (:opts
     ((doom-modeline-icon             ;; changed
       doom-modeline-unicode-fallback ;; changed
       doom-modeline-minor-modes)      ;; changed
       ;; doom-modeline-hud)             ;; changed
      . t))
    (:opt
     doom-modeline-buffer-encoding       nil  ;; changed
     doom-modeline-checker-simple-format nil  ;; changed
     doom-modeline-persp-name            nil))  ;; changed
#+end_src

** Nasy Theme

#+begin_src emacs-lisp
  (setup nasy-theme)
#+end_src

** Main Theme

#+begin_src emacs-lisp
  (defun nasy/load-theme ()
    "Nasy load theme function"
    (when *theme*
      (require 'nasy-theme)
      (load-theme *theme* t)))

  (add-hook 'after-init-hook #'nasy/load-theme)
#+end_src

** Tool Bar

#+begin_src emacs-lisp
  (setup tool-bar
    (:tag "builtin")
    (:bind-into tool-bar-map
      [copy]            nil
      [cut]             nil
      [dired]           nil
      [isearch-forward] nil
      [new-file]        nil
      [open-file]       nil
      [paste]           nil
      [save-buffer]     nil
      [undo]            nil
      [yank]            nil)
    (:init (tool-bar-mode -1)))
#+end_src

** Tab Line

#+begin_src emacs-lisp
  ;; (add-hook 'after-init-hook #'global-tab-line-mode)
  ;; (setq tab-line-close-tab-function #'kill-buffer)
#+end_src

* 結                                                :noexport:

#+begin_src emacs-lisp :exports none
  (provide '庭燎)
  ;;; 庭燎.el ends here
#+end_src

# Local Variables:
# org-src-fontify-natively: nil
# End:
