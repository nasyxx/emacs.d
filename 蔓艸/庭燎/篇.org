#+PROPERTY: header-args:emacs-lisp :tangle (concat temporary-file-directory "庭燎.el") :lexical t
#+title: 庭燎

#+begin_verse
  小雅・彤弓之什・庭燎

  夜如何其、夜未央、庭燎之光
  君子至止、鸞聲將將

  夜如何其、夜未艾、庭燎皙皙
  君子至止、鸞聲噦噦

  夜如何其、夜郷晨、庭燎有煇
  君子至止、言觀其旂
#+end_verse

容皃也

UI

* 題                                                :noexport:

#+begin_src emacs-lisp :exports none
  ;;; 庭燎.el --- Nasy's emacs.d UI file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; 容皃也

  ;;; Code:
  (cl-eval-when (compile)
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/擊鼓"))
    (add-to-list 'load-path (locate-user-emacs-file "桃夭/風雨"))
    (require '擊鼓)
    (require '風雨)
    (require '風雨時用)

    (require 'cal-china)

    (sup 'cal-china-x t)
    (sup 'centaur-tabs t)
    (sup 'dashboard t)
    (sup 'dash t)
    (sup 'nerd-icons t)
    (sup 'treemacs t)
    (sup 'ligature t))
#+end_src

* 章

** Calendar

Also cal-china-x

This extension mainly adds the following extra features:

+ Chinese localizations
+ Display holiday, lunar(农历), horoscope(星座), zodiac(属相、十二生肖), solar term(节气) info on mode line
+ Define holidays using holiday-lunar, holiday-solar-term
+ Highlight holidays based on different priorities
+ Add cal-china-x-chinese-holidays, cal-china-x-japanese-holidays.
+ Custom week diary (like weeks in school)

https://github.com/xwl/cal-china-x

#+begin_src emacs-lisp
  (defun nasy/chinese-date-string (date)
    "Nasy version calendar string of DATE."
    (let* ((cn-date (calendar-chinese-from-absolute
                     (calendar-absolute-from-gregorian date)))
           (cn-year  (cadr   cn-date))
           (cn-month (cl-caddr  cn-date))
           (cn-day   (cl-cadddr cn-date)))
      (format "黃帝%s%s%s%s%s%s(%s)"
              (+ 2698 (calendar-extract-year date))
              (calendar-chinese-sexagesimal-name cn-year)
              ;; (aref cal-china-x-zodiac-name (% (1- cn-year) 12))
              (aref cal-china-x-month-name (1-  (floor cn-month)))
              (if (integerp cn-month) "" "(闰月)")
              (aref cal-china-x-day-name (1- cn-day))
              (cal-china-x-get-solar-term date)
              (cal-china-x-get-horoscope (car date) (cadr date)))))


  (defun nasy/init-chinese-calendar ()
    "Initial Chinese calendar."
    (setq calendar-date-display-form
          '((cal-china-x-calendar-display-form
             (mapcar (lambda (el) (string-to-number el))
                     (list month day year)))))

    (setq diary-date-forms chinese-date-diary-pattern)

    (setq calendar-chinese-celestial-stem cal-china-x-celestial-stem
          calendar-chinese-terrestrial-branch cal-china-x-terrestrial-branch)

    ;; (setq calendar-month-header '(propertize (format "%d年%2d月" year month)
    ;;                                          'font-lock-face
    ;;                                          'calendar-month-header))

    (when cal-china-x-force-chinese-week-day
      (setq calendar-day-header-array cal-china-x-days))

    (setq calendar-mode-line-format
          (list
           (calendar-mode-line-entry 'calendar-scroll-right "previous month" "<")
           ;; "日曆"

           '(cal-china-x-get-holiday date)

           '(concat " " (calendar-date-string date t)
                    (format " 第%d周"
                            (funcall (if cal-china-x-custom-week-start-date
                                         'cal-china-x-custom-week-of-date
                                       'cal-china-x-week-of-date)
                                     date)))

           '(nasy/chinese-date-string date)

           ;; " "

           ;; (concat
           ;;  (calendar-mode-line-entry 'calendar-goto-info-node "read Info on Calendar"
           ;;                            nil "info")
           ;;  " / "
           ;;  (calendar-mode-line-entry 'calendar-other-month "choose another month"
           ;;                            nil "other")
           ;;  " / "
           ;;  (calendar-mode-line-entry 'calendar-goto-today "go to today's date"
           ;;                            nil "today"))

           (calendar-mode-line-entry 'calendar-scroll-left "next month" ">")))

    (add-hook 'calendar-move-hook 'calendar-update-mode-line)
    (add-hook 'calendar-initial-window-hook 'calendar-update-mode-line)

    (add-hook 'calendar-mode-hook
              (lambda ()
                (set (make-local-variable 'font-lock-defaults)
                     ;; chinese month and year
                     '((("[0-9]+年\\ *[0-9]+月" . font-lock-function-name-face)) t))))


    (advice-add 'calendar-mark-holidays :around 'cal-china-x-mark-holidays)
    (advice-add 'mouse-set-point :after 'cal-china-x-mouse-set-point))


  (setup calendar
    (:customs
     ;; 爾雅 月名
     ((calendar-chinese-month-name-array cal-china-x-month-name)
      . ["陬月" "如月" "寎月" "余月" "皋月" "且月"
         "相月" "壯月" "玄月" "陽月" "辜月" "涂月"])))


  (setup cal-china-x
    (:doc "chinese localization, prioritized holiday highlight, lunar, horoscope, zodiac, etc.")
    (:url "https://github.com/xwl/cal-china-x")
    (:tag "calendar" "date")
    (:opt
     cal-china-x-force-chinese-week-day t
     cal-china-x-always-show-jieqi      t)
    (:first-key
     (lambda ()
       (progn
         (require 'calendar)
         (require 'cal-china-x)
         (nasy/init-chinese-calendar)))))

#+end_src

** Centaur Tab

This projects aims to become an aesthetic, functional and efficient
tabs plugin for Emacs with a lot of customization options.

https://github.com/ema2159/centaur-tabs

#+begin_src emacs-lisp
  (setup centaur-tabs
    (:advice centaur-tabs-buffer-groups :override nasy/-centaur-tabs-buffer-groups)
    (:opt
     centaur-tabs-style "wave")
    (:with-hook nasy/font-change-hook
      (:hook (lambda () (nasy/set-symbol ?⏺ 14)))))


  (defun nasy/-enable-centaur-tabs-local-mode ()
    (unless centaur-tabs-mode
      (centaur-tabs-mode 1))
    (centaur-tabs-local-mode 1))

  (defun nasy/-disable-centaur-tabs-local-mode ()
    (unless centaur-tabs-mode
      (centaur-tabs-mode 1))
    (centaur-tabs-local-mode -1))


  (defvar nasy--centaur-text-modes
    '(org-mode org-agenda-mode org-agenda-clockreport-mode
               org-agenda-log-mode org-beamer-mode
               org-bullets-mode org-cdlatex-mode
               org-indent-mode org-src-mode diary-mode
               text-mode markdown-mode))

  (defvar nasy--centaur-vc-modes
    '(magit-blame-mode magit-blob-mode magit-diff-mode
                       magit-file-mode magit-log-mode
                       magit-process-mode magit-status-mode))


  (defun nasy/-centaur-tabs-buffer-groups ()
    "Nasy's centaur tabs groups."
    (let ((bn (buffer-name)))
      (list
       (cond
        ;; org, markdown & text
        ((or (memq major-mode nasy--centaur-text-modes)
             (string-prefix-p "*Org Src" bn)
             (string-prefix-p "*Org Export" bn))
         "書寫")

        ;; VC
        ((memq major-mode nasy--centaur-vc-modes)
         "Magit")

        ;; Shell
        ((memq major-mode '(eshell-mode shell-mode vterm-mode))
         "Shell")

        ;; Info & Help
        ((memq major-mode '(help-mode info-mode helpful-mode))
         "注")

        ;; programming
        ((derived-mode-p 'prog-mode)
         "編程")

        ;; Web Page
        ((or (memq major-mode '(eww-mode xwidget-webkit-mode))
             (string-prefix-p "*xwidget webkit" bn))
         "網頁")

        ;; Emacs
        ((string-prefix-p "*" bn)
         "虛")

        ;; 雜
        (t (centaur-tabs-get-group-name (current-buffer)))))))


  (setup centaur-tabs
    (:quit)
    (:opt
     centaur-tabs-set-modified-marker t
     centaur-tabs-height     28
     centaur-tabs-bar-height 30
     centaur-tabs-set-close-button      nil
     centaur-tabs-enable-ido-completion nil)
    (:first-key nasy/-disable-centaur-tabs-local-mode)
    (:mode-hook
     ;; (centaur-tabs-headline-match)

     (customize-set-variable 'centaur-tabs-set-icons t
                             "Customized by Nasy in `centaur-tabs' block")
     (customize-set-variable 'centaur-tabs-show-navigation-buttons t
                             "Customized by Nasy in `centaur-tabs' block")
     (setq centaur-tabs-active-bar
           (centaur-tabs--make-xpm 'centaur-tabs-active-bar-face
                                  4
                                  centaur-tabs-bar-height))))

#+end_src

** Dashboard

#+begin_src emacs-lisp
  (setup dashboard
    (:autoload dashboard-refresh-buffer
               dashboard-setup-startup-hook))


  (defun nasy/-set-dashboard-init-info (&rest _)
    (setq dashboard-init-info
          (let ((package-count 0) (time (emacs-init-time)))
            (setq package-count (+ (hash-table-size straight--profile-cache) package-count))
            (if (zerop package-count)
                (format "Emacs started in %s" time)
              (format "%d packages loaded in %s" package-count time)))))


  (defun nasy/-dashboard-items (_)
    (insert "\n       ")
    (widget-create 'item
                   :tag "近期 (r)"
                   :action #'consult-recent-file
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀯛 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open recent files")
    (insert "\t")
    (widget-create 'item
                   :tag "書籤 (b)"
                   :action #'consult-bookmark
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉚 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open bookmarks")
    (insert "\t")
    (widget-create 'item
                   :tag "項目 (p)"
                   :action #'projectile-switch-project
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉹  "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open projects")
    (insert "\n\n       ")
    (widget-create 'item
                   :tag "草稿 (c)"
                   :action #'persistent-scratch-restore
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀤑 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "restore scratch buffer")
    (insert "\t")
    (widget-create 'item
                   :tag "議程 (a)"
                   :action #'org-agenda
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀮝 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "Org Agenda")
    (insert "\t")
    (widget-create 'item
                   :tag "日曆 (d)"
                   :action #'calendar
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉉 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open calendar")
    (insert "\n\n       ")
    (widget-create 'item
                   :tag "芄蘭 (C)"
                   :action #'nasy/-open-custom
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀍟 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open custom file")
    (insert "\t")
    (widget-create 'item
                   :tag "源碼 (s)"
                   :action #'nasy/-open-source-page
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀧎 "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open https://github.com/nasyxx/emacs.d/")
    (insert "\t")
    (widget-create 'item
                   :tag "文檔 (D)"
                   :action #'nasy/-open-document
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "􀉅  "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open https://emacs.nasy.moe")
    (insert "\n\n"))


  (defun nasy/dashboard-refresh ()
    "Refresh dashboard buffer."
    (interactive)
    (unless (get-buffer dashboard-buffer-name)
      (generate-new-buffer "*dashboard*"))
    (dashboard-refresh-buffer))


  (declare-function persistent-scratch-restore "persistent-scratch")


  (setup dashboard
    (:global
     "<f5>" dashboard-refresh-buffer)
    (:bindm dashboard-mode-map
     "r"              consult-recent-file
     "b"              consult-bookmark
     "p"              projectile-switch-project
     "c"              persistent-scratch-restore
     "a"              org-agenda
     "d"              calendar
     "C"              nasy/-open-custom
     "s"              nasy/-open-source-page
     "D"              nasy/-open-document
     "g"              dashboard-refresh-buffer
     "<down-mouse-1>" nil
     "H-p"            dashboard-previous-line
     "H-n"            dashboard-next-line
     "H-b"            widget-backward
     "H-f"            widget-forward
     "<mouse-1>"      widget-button-click
     "<mouse-2>"      widget-button-click
     "<up>"           widget-backward
     "<down>"         nasy/wfw1
     [remap previous-line] widget-backward
     [remap next-line]     nasy/wfw1)
    (:hooks
     dashboard-mode-hook (lambda () (setq-local tab-width 1))
     after-init-hook     dashboard-setup-startup-hook
     after-init-hook     dashboard-refresh-buffer)
     ;; nasy/font-change-hook (lambda ()
     ;;                         (progn
     ;;                           (nasy/set-apple-symbol ?🌓)
     ;;                           (nasy/set-apple-symbol ?🔖)
     ;;                           (nasy/set-apple-symbol ?🚀)
     ;;                           (nasy/set-apple-symbol ?📝)
     ;;                           (nasy/set-apple-symbol ?🗓)
     ;;                           (nasy/set-apple-symbol ?📅)
     ;;                           (nasy/set-apple-symbol ?⚙)
     ;;                           (nasy/set-apple-symbol ?🍭)
     ;;                           (nasy/set-apple-symbol ?📖))))
    (:opt*
     dashboard-items '((n-items . t))
                       ;; (bookmarks . t)
                       ;; (registers . 5)
                       ;; (agenda    . 5)
                       ;; (projects  . 7))))
     dashboard-item-generators '((n-items . nasy/-dashboard-items))
     dashboard-startup-banner  (concat *nasy-etc* "n_icon.png"))
    (:opts*
     ((dashboard-center-content
       dashboard-set-heading-icons
       dashboard-set-init-info)
      . t))
    (:advice dashboard-refresh-buffer :before nasy/-set-dashboard-init-info))
#+end_src

** doom Theme

#+begin_src emacs-lisp
  (setup doom-themes
    (:first-key* (require 'doom-themes))
    (:opt
     doom-dracula-brighter-comments t
     doom-dracula-colorful-headers  t
     doom-dracula-comment-bg        t
     ;; doom-themes-treemacs-theme "doom-colors"
     doom-themes-org-fontify-special-tags nil)
    (:when-loaded
     ;; (after-x 'treemacs
     ;;   (doom-themes-treemacs-config))
     ;; (doom-themes-visual-bell-config)
     (after-x 'org
       (doom-themes-org-config))))
#+end_src

** Icons                                                :icons:

以 nerd font 显眎圖幖

#+begin_src emacs-lisp
  (setup nerd-icons
    (:after kind-icon
      (:opt
       kind-icon-use-icons nil
       kind-icon-mapping
       `((array          ,(nerd-icons-codicon "nf-cod-symbol_array")       :face font-lock-type-face)
         (boolean        ,(nerd-icons-codicon "nf-cod-symbol_boolean")     :face font-lock-builtin-face)
         (class          ,(nerd-icons-codicon "nf-cod-symbol_class")       :face font-lock-type-face)
         (color          ,(nerd-icons-codicon "nf-cod-symbol_color")       :face success)
         (command        ,(nerd-icons-codicon "nf-cod-terminal")           :face default)
         (constant       ,(nerd-icons-codicon "nf-cod-symbol_constant")    :face font-lock-constant-face)
         (constructor    ,(nerd-icons-codicon "nf-cod-triangle_right")     :face font-lock-function-name-face)
         (enummember     ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
         (enum-member    ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
         (enum           ,(nerd-icons-codicon "nf-cod-symbol_enum")        :face font-lock-builtin-face)
         (event          ,(nerd-icons-codicon "nf-cod-symbol_event")       :face font-lock-warning-face)
         (field          ,(nerd-icons-codicon "nf-cod-symbol_field")       :face font-lock-variable-name-face)
         (file           ,(nerd-icons-codicon "nf-cod-symbol_file")        :face font-lock-string-face)
         (folder         ,(nerd-icons-codicon "nf-cod-folder")             :face font-lock-doc-face)
         (interface      ,(nerd-icons-codicon "nf-cod-symbol_interface")   :face font-lock-type-face)
         (keyword        ,(nerd-icons-codicon "nf-cod-symbol_keyword")     :face font-lock-keyword-face)
         (macro          ,(nerd-icons-codicon "nf-cod-symbol_misc")        :face font-lock-keyword-face)
         (magic          ,(nerd-icons-codicon "nf-cod-wand")               :face font-lock-builtin-face)
         (method         ,(nerd-icons-codicon "nf-cod-symbol_method")      :face font-lock-function-name-face)
         (function       ,(nerd-icons-codicon "nf-cod-symbol_method")      :face font-lock-function-name-face)
         (module         ,(nerd-icons-codicon "nf-cod-file_submodule")     :face font-lock-preprocessor-face)
         (numeric        ,(nerd-icons-codicon "nf-cod-symbol_numeric")     :face font-lock-builtin-face)
         (operator       ,(nerd-icons-codicon "nf-cod-symbol_operator")    :face font-lock-comment-delimiter-face)
         (param          ,(nerd-icons-codicon "nf-cod-symbol_parameter")   :face default)
         (property       ,(nerd-icons-codicon "nf-cod-symbol_property")    :face font-lock-variable-name-face)
         (reference      ,(nerd-icons-codicon "nf-cod-references")         :face font-lock-variable-name-face)
         (snippet        ,(nerd-icons-codicon "nf-cod-symbol_snippet")     :face font-lock-string-face)
         (string         ,(nerd-icons-codicon "nf-cod-symbol_string")      :face font-lock-string-face)
         (struct         ,(nerd-icons-codicon "nf-cod-symbol_structure")   :face font-lock-variable-name-face)
         (text           ,(nerd-icons-codicon "nf-cod-text_size")          :face font-lock-doc-face)
         (typeparameter  ,(nerd-icons-codicon "nf-cod-list_unordered")     :face font-lock-type-face)
         (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered")     :face font-lock-type-face)
         (unit           ,(nerd-icons-codicon "nf-cod-symbol_ruler")       :face font-lock-constant-face)
         (value          ,(nerd-icons-codicon "nf-cod-symbol_field")       :face font-lock-builtin-face)
         (variable       ,(nerd-icons-codicon "nf-cod-symbol_variable")    :face font-lock-variable-name-face)
         (t              ,(nerd-icons-codicon "nf-cod-code")               :face font-lock-warning-face)))))

  (setup nerd-icons-ibuffer
    (:hook-into ibuffer-mode-hook))

  (setup nerd-icons-completion
    (:first-key nerd-icons-completion-mode))

  (setup treemacs-nerd-icons
    (:after* treemacs
      (:require treemacs-nerd-icons)
      (treemacs-load-theme "nerd-icons")))
#+end_src

** Ligature

This package maps ordinary graphemes (characters) to fancy ligatures, if both your version of Emacs and the font supports it.

With this package you can control where Emacs must display ligatures. That is useful if you only want a subset of the ligatures in certain major modes, for instance, or if you want to ensure that some modes have no ligatures at all.

https://github.com/mickeynp/ligature.el

#+begin_src emacs-lisp
  (setup ligature
    (:after ligature
     (ligature-set-ligatures
      't
      '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
        ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
        "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
        "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
        "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
        "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
        "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
        "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
        ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
        "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
        "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
        "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
        "\\\\" "://" "ff" "fi" "ffi")))
    (:first-key global-ligature-mode))
#+end_src

#+begin_src emacs-lisp
  (defvar nasy-prog-mode-first-key-hook nil)
  (defvar nasy--prog-mode-first-key-hook nil)

  (defun nasy/-load-prog-mode ()
    (setq nasy--prog-mode-first-key-hook nasy-prog-mode-first-key-hook)
    (nasy/run-hook-once-on 'nasy--prog-mode-first-key-hook 'pre-command-hook))

  (add-hook 'prog-mode-hook #'nasy/-load-prog-mode)

  (add-hook 'nasy-prog-mode-first-key-hook #'(lambda () (global-ligature-mode 1)))
#+end_src

** Mode Line

#+begin_src emacs-lisp
  (defun nasy/-start-display-time ()
    "Nasy start display time mode."
    (customize-set-variable 'display-time-24hr-format          t "Customized by Nasy.")
    (customize-set-variable 'display-time-day-and-date         t "Customized by Nasy.")
    (customize-set-variable 'display-time-load-average         nil "Customized by Nasy.")
    (customize-set-variable 'display-time-default-load-average nil "Customized by Nasy.")
    (display-time-mode 1))

  (add-hook 'nasy-first-key-hook #'nasy/-start-display-time)
#+end_src

#+begin_src emacs-lisp
  (setup nyan-mode
    (:opt
     nyan-animate-nyancat t
     nyan-bar-length      16
     nyan-wavy-trail      t)
    (:hook-into nasy-first-key-hook))
#+end_src

#+begin_src emacs-lisp
  (setup minions
    (:opt
     minions-mode-line-lighter "✬")
    (:hook-into nasy-first-key-hook))
#+end_src

#+begin_src emacs-lisp
  (setup doom-modeline
    (:hook-into emacs-startup-hook))

  (setup doom-modeline
    (:opt
     inhibit-compacting-font-caches   t
     doom-modeline-bar-width          5
     doom-modeline-window-width-limit fill-column
     doom-modeline-project-detection  'ffip  ;; changed
     doom-modeline-continuous-word-count-modes
     '(markdown-mode gfm-mode org-mode text-mode))
    (:opts
     ((doom-modeline-icon             ;; changed
       doom-modeline-unicode-fallback ;; changed
       doom-modeline-minor-modes)      ;; changed
       ;; doom-modeline-hud)             ;; changed
      . t))
    (:opt
     doom-modeline-buffer-encoding       nil  ;; changed
     doom-modeline-checker-simple-format nil  ;; changed
     doom-modeline-persp-name            nil))  ;; changed
#+end_src

** Nasy Theme

#+begin_src emacs-lisp
  (setup nasy-theme)
#+end_src

** Main Theme

#+begin_src emacs-lisp
  (defun nasy/load-theme ()
    "Nasy load theme function"
    (when *theme*
      (require 'nasy-theme)
      (load-theme *theme* t)))

  (add-hook 'after-init-hook #'nasy/load-theme)
#+end_src

** Tool Bar

#+begin_src emacs-lisp
  (setup tool-bar
    (:tag "builtin")
    (:bindm tool-bar-map
      [copy]            nil
      [cut]             nil
      [dired]           nil
      [isearch-forward] nil
      [new-file]        nil
      [open-file]       nil
      [paste]           nil
      [save-buffer]     nil
      [undo]            nil
      [yank]            nil)
    (:init (tool-bar-mode -1)))
#+end_src

** Tab Line

#+begin_src emacs-lisp
  ;; (add-hook 'after-init-hook #'global-tab-line-mode)
  ;; (setq tab-line-close-tab-function #'kill-buffer)
#+end_src

* 結                                                :noexport:

#+begin_src emacs-lisp :exports none
  (provide '庭燎)
  ;;; 庭燎.el ends here
#+end_src

# Local Variables:
# org-src-fontify-natively: nil
# End:
