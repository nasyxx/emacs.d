** Selectrum                                       :extensions:

Better solution for incremental narrowing in Emacs.

https://github.com/raxod502/selectrum

#+begin_src emacs-lisp
  (leaf selectrum
    :doc "Better solution for incremental narrowing in Emacs."
    :url "https://github.com/raxod502/selectrum"
    :tag "extensions"
    :bind (:minibuffer-local-map
           ("M-DEL" . nasy/up-directory))
    :hook
    (nasy-first-key-hook)
    (nasy--defer-load-hook . (lambda () (require 'selectrum)))
    :mode-hook
    (after-x '風雨時用
      (nasy/active-region-mode 1))
    :init
    (sup 'selectrum))


  ;; marginalia with leaf
  '(:advice (:after marginalia-cycle
                   (lambda ()
                     (when (bound-and-true-p selectrum-mode)
                       (selectrum-exhibit)))))
#+end_src

#+begin_src emacs-lisp
  (defun refresh-selectrum ()
    (setq selectrum--previous-input-string nil))


  (defun nasy/-resize-embark-collect-window (&rest _)
    "Automatically resizing auto-updating Embark Collect buffers to fit their contents."
    (when (memq embark-collect--kind '(:live :completions))
      (fit-window-to-buffer (get-buffer-window)
                            (floor (frame-height) 2) 1)))

  (defun shrink-selectrum ()
    "Shrink Selectrum to a single line while using embark-collect-live."
    (when (eq embark-collect--kind :live)
      (with-selected-window (active-minibuffer-window)
        (setq-local selectrum-num-candidates-displayed 1)
        (setq-local selectrum-display-style
                    '(horizontal :before-candidates "[" :after-candidates "]"
                                 :more-candidates "" :candidates-separator "")))))
#+end_src
