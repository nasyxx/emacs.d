#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-ui.el")

* Header                                                              :noexport:

#+begin_src elisp
  ;;; nasy-ui.el --- Nasy's Emacs Configuration editor file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Emacs Configuration UI.

  ;;; Code:
#+end_src

* Package

  #+begin_src elisp
    (nasy/s-u-p dashboard doom-themes)
  #+end_src

* Configs

** Dashboard

#+begin_src elisp
  (leaf dashboard
    :commands dashboard-setup-startup-hook
    :preface
    (defun nasy/wfw1 (&rest _)
      "Widget forward 1."
      (interactive)
      (widget-forward 1))
    (defun nasy/fw2 (&rest _)
      "Forward 2 chars."
      (interactive "p")
      (forward-char 2))
    :bind
    ("<f5>" . dashboard-refresh-buffer)
    (:dashboard-mode-map
     ("g"              . dashboard-refresh-buffer)
     ("<down-mouse-1>" . nil)
     ("H-p"            . dashboard-previous-line)
     ("H-n"            . dashboard-next-line)
     ("H-b"            . widget-backward)
     ("H-f"            . widget-forward)
     ("<mouse-1>"      . widget-button-click)
     ("<mouse-2>"      . widget-button-click)
     ("<up>"           . widget-backward)
     ("<down>"         . nasy/wfw1))
    :hook ((dashboard-mode-hook . (lambda () (gsetq-local tab-width 1)))
           (after-init-hook     . dashboard-setup-startup-hook))
    :custom
    (dashboard-org-agenda-categories . '("Calendar" "Tasks" "Appointments"))
    `(dashboard-startup-banner       . ,(expand-file-name "mega.png" user-emacs-directory))
    (dashboard-items . '((recents   . 10)
                         (bookmarks . 10)
                         ;; (registers . 5)
                         ;; (agenda    . 5)
                         (projects  . 10)))
    ((dashboard-center-content
      dashboard-show-shortcuts
      dashboard-set-heading-icons
      dashboard-set-file-icons
      dashboard-set-init-info
      show-week-agenda-p
      dashboard-set-navigator) . t)
    :init
    (after-x 'all-the-icons
      (setq dashboard-navigator-buttons
            `(;; line1
              ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                "Source"
                "Source Page"
                (lambda (&rest _) (browse-url "https://github.com/nasyxx/emacs.d/")))
               (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
                "Config"
                "Config File"
                (lambda (&rest _) (let ((upath (expand-file-name "custom/user-config.el" user-emacs-directory))))
                               (epath (expand-file-name "custom/user-config-example.el" user-emacs-directory))
                  (when (and (file-exists-p epath)
                            (not (file-exists-p upath)))
                    (copy-file epath upath))
                  (find-file upath)))
               (,(all-the-icons-octicon "book" :height 1.1 :v-adjust 0.0)
                "Document"
                "Document Page"
                (lambda (&rest _) (browse-url "https://emacs.nasy.moe/")))))))
    :advice
    (:after dashboard-next-line     nasy/fw2)
    (:after widget-forward          nasy/fw2)
    (:after widget-backward         nasy/fw2))
#+end_src

** doom Theme

#+begin_src elisp
  (leaf doom-themes
    :custom
    ((doom-dracula-brighter-comments
      doom-dracula-colorful-headers
      doom-dracula-comment-bg) . t)
    (doom-themes-treemacs-theme . "doom-colors")
    :config
    (after-x 'treemacs
      (doom-themes-treemacs-config))
    (doom-themes-visual-bell-config)
    (after-x 'org-mode
      (doom-themes-org-config)))
#+end_src

** Font

#+begin_src elisp
  (defun nasy/check-font (font)
    "Check if FONT avaliable."
    (if (find-font (font-spec :family font
                              :weight *font-weight*
                              :size   *font-size*))
        t
      (message (format "`%s' font not find" font))))

  (defun nasy/set--font (frame)
    "Nasy set font for `FRAME'."
    (when (display-graphic-p)

      ;; default
      (when (nasy/check-font *font*)
        (set-face-attribute
            'default nil
            :font (font-spec :family *font*
                             :weight *font-weight*
                             :size   *font-size*)))
      ;; 中文
      (dolist (charset '(kana han cjk-misc bopomofo))
        (progn
          (when (nasy/check-font *font-cjk-2*)
            (set-fontset-font (frame-parameter nil 'font)
                              charset
                              (font-spec :family *font-cjk-2*
                                         :weight *font-weight-cjk-2*
                                         :size   *font-size-cjk*)
                              frame
                              'prepend))

          (when (nasy/check-font *font-cjk*)
            (set-fontset-font (frame-parameter nil 'font)
                              charset
                              (font-spec :family *font-cjk*
                                         :weight *font-weight-cjk*
                                         :size   *font-size-cjk*)
                              frame
                              'prepend))))

      (when (nasy/check-font *font*)
        (set-fontset-font t
                          'symbol
                          (font-spec :family *font*)
                          frame
                          'prepend))

      (when (and *is-a-mac*
                (nasy/check-font "Apple Color Emoji"))
        ;; For NS/Cocoa
        (set-fontset-font t
                          'symbol
                          (font-spec :family "Apple Color Emoji")
                          frame
                          'prepend))


      (when (nasy/check-font "Symbola")
        ;; For Linux
        (set-fontset-font t
                          'symbol
                          (font-spec :family "Symbola")
                          frame
                          'append))

      (when (nasy/check-font *font-modeline*)
        (set-face-attribute 'mode-line nil
                            :font (font-spec :family *font-modeline*
                                             :weight 'normal
                                             :size   14))

        (set-face-attribute 'mode-line-inactive nil
                            :font (font-spec :family *font-modeline*
                                             :weight 'normal
                                             :size   14))
        (set-face-attribute 'tab-line nil
                            :font (font-spec :family *font-modeline*
                                             :weight 'normal
                                             :size   12)))

      (after-x 'doom-modeline
        (doom-modeline--set-char-widths doom-modeline-rhs-icons-alist))))


  (defun nasy/set-font (&rest _)
    "Nasy set font."
    (interactive)
    (nasy/set--font nil))


  (add-hook #'after-init-hook #'nasy/set-font)
  (add-hook #'after-make-frame-functions   #'nasy/set-font)
  (add-hook #'server-after-make-frame-hook #'nasy/set-font)
#+end_src

** Main Theme

#+begin_src elisp
  (defun nasy/load-theme ()
    "Nasy load theme function"
    (when *theme*
      (load-theme *theme* t)))

  (add-hook #'after-init-hook #'nasy/load-theme)
#+end_src

** Mode Line

#+begin_src elisp
  (straight-use-package 'nyan-mode)
  (leaf nyan-mode
    :custom (nyan-animate-nyancat . t)
            (nyan-bar-length      . 16)
            (nyan-wavy-trail      . t)
    :hook after-init-hook)
#+end_src

#+begin_src elisp
  (straight-use-package 'minions)
  (leaf minions
    :hook after-init-hook
    :custom (minions-mode-line-lighter . "✬"))
#+end_src

# #+include: "spaceline.org"

#+begin_src elisp
  (straight-use-package 'doom-modeline)
  (leaf doom-modeline
    :hook after-init-hook
    :defun doom-modeline-def-segment
    :custom
    ((doom-modeline-height                      . 25)
     (doom-modeline-bar-width                   . 3)
     (doom-modeline-window-width-limit          . fill-column)
     (doom-modeline-project-detection           . 'project)  ;; changed
     (doom-modeline-buffer-file-name-style      . 'auto)
     ((doom-modeline-icon                       ;; changed
       doom-modeline-major-mode-icon
       doom-modeline-major-mode-color-icon
       doom-modeline-buffer-state-icon
       doom-modeline-buffer-modification-icon
       doom-modeline-unicode-fallback           ;; changed
       doom-modeline-minor-modes                ;; changed
       doom-modeline-enable-word-count)         ;; changed
      . t)
     (doom-modeline-continuous-word-count-modes . '(markdown-mode gfm-mode org-mode text-mode))
     (doom-modeline-buffer-encoding             . nil)  ;; changed
     (doom-modeline-indent-info                 . nil)
     (doom-modeline-checker-simple-format       . nil)  ;; changed
     (doom-modeline-number-limit                . 99)
     (doom-modeline-vcs-max-length              . 12)
     (doom-modeline-persp-name                  . nil)  ;; changed
     (doom-modeline-display-default-persp-name  . nil)
     (doom-modeline-lsp                         . t)
     (doom-modeline-github                      . t)
     `(doom-modeline-github-interval            . ,(* 30 60))
     (doom-modeline-modal-icon                  . t)

     ((doom-modeline-env-version
       doom-modeline-env-enable-python
       doom-modeline-env-enable-ruby
       doom-modeline-env-enable-perl
       doom-modeline-env-enable-go
       doom-modeline-env-enable-elixir
       doom-modeline-env-enable-rust)
      . t)

     (doom-modeline-env-python-executable . "python")
     (doom-modeline-env-ruby-executable   . "ruby")
     (doom-modeline-env-perl-executable   . "perl")
     (doom-modeline-env-go-executable     . "go")
     (doom-modeline-env-elixir-executable . "iex")
     (doom-modeline-env-rust-executable   . "rustc")

     (doom-modeline-env-load-string . "...")

     (doom-modeline-mu4e        . t)
     (doom-modeline-irc         . t)
     (doom-modeline-irc-stylize . 'identity)))
#+end_src

** Nasy Theme

#+begin_src elisp
  (leaf nasy-theme)
#+end_src

** Tool Bar

#+begin_src elisp
  (leaf tool-bar
    :tag "builtin"
    :bind
    (:tool-bar-map
     ([copy]            . nil)
     ([cut]             . nil)
     ([dired]           . nil)
     ([isearch-forward] . nil)
     ([new-file]        . nil)
     ([open-file]       . nil)
     ([paste]           . nil)
     ([save-buffer]     . nil)
     ([undo]            . nil)
     ([yank]            . nil)))
     ;; ([dashboard-refresh-buffer]
     ;;  . `(menu-item))))
#+end_src

** Tab Line

#+begin_src elisp
  ;; (add-hook #'after-init-hook #'global-tab-line-mode)
  ;; (gsetq tab-line-close-tab-function #'kill-buffer)
#+end_src

* Footer                                                              :noexport:

#+begin_src elisp
  (provide 'nasy-ui)
  ;;; nasy-ui.el ends here
#+end_src
