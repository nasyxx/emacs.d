#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-langs.el")

* Header                                                 :noexport:

#+begin_src elisp
  ;;; nasy-langs.el --- Nasy's Emacs Configuration language file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Emacs Configuration Languages.

  ;;; Code:
#+end_src

* Packages

#+begin_src elisp
  (setq parinfer-rust-auto-download t
        parinfer-rust-library
        (no-littering-expand-var-file-name "parinfer-rust/parinfer-rust-darwin.so"))

  (straight-register-package
   '(parinfer-rust-mode :type git
                        :host github
                        :repo "justinbarclay/parinfer-rust-mode"))

  (straight-register-package
   '(keytar :type git
            :host github
            :repo "emacs-grammarly/keytar"))

  (nasy/s-u-p
    ;; lisps
    cl-lib-highlight
    elisp-def
    highlight-quoted
    ipretty
    macrostep
    parinfer-rust-mode

    ;; lsp-mode
    dap-mode
    lsp-mode
    lsp-treemacs
    lsp-ui
    ;; lsp-grammarly

    ;; haskell
    haskell-mode
    haskell-snippets
    lsp-haskell

    ;; nix
    nix-mode
    nix-update
    nix-buffer
    nixpkgs-fmt
    nixos-options
    company-nixos-options

    ;; python
    elpy
    lsp-pyright

    company-restclient
    elvish-mode
    fish-completion
    fish-mode
    markdown-mode
    ob-elvish
    ob-restclient
    pandoc-mode
    reformatter
    restclient
    toml-mode
    yaml-mode
    (:when *rust* cargo rust-mode))
#+end_src

* Configs

** Language Server Protocol & Debug Adapter Protocol   :languages:

Emacs client/library for the Language Server Protocol

*** lsp-mode                                          :languages:

#+begin_src elisp
  (leaf lsp-mode
    :doc "Language Server Protocol Support for Emacs."
    :url "https://github.com/emacs-lsp/lsp-mode"
    :tag "languages"
    :hook
    (kill-emacs-hook . (lambda () (setq lsp-restart 'ignore)))
    :mode-hook
    (nasy/lsp-init)
    :init
    (defun nasy/lsp-init ()
      "Nasy lsp mode init.")


    :advice
    (:after lsp-diagnostics--enable (lambda () (flycheck-inline-mode -1)))
    :custom
    ((lsp-log-io
      lsp-print-performance
      lsp-report-if-no-buffer) . *debug*)

    ((lsp-enable-snippet
      lsp-auto-configure
      lsp-inhibit-message
      lsp-eldoc-render-all
      lsp-enable-xref
      lsp-enable-indentation
      lsp-enable-on-type-formatting
      lsp-before-save-edits
      lsp-imenu-show-container-name
      lsp-semantic-tokens-enable
      lsp-enable-imenu
      lsp-signature-render-documentation
      lsp-enable-text-document-color
      lsp-headerline-breadcrumb-enable
      lsp-eldoc-enable-hover

      lsp-enable-links
      lsp-enable-symbol-highlighting
      lsp-enable-folding) . t)

    ((lsp-keep-workspace-alive
      lsp-auto-guess-root
      lsp-document-sync-method
      lsp-auto-execute-action
      lsp-enable-completion-at-point
      lsp-enable-file-watchers
      lsp-server-trace

      lsp-modeline-diagnostics-enable) . nil)

    (lsp-restart . 'interactive)

    (lsp-diagnostics-provider . :auto)

    (lsp-imenu-container-name-separator . "/")
    (lsp-imenu-sort-methods             . '(kind position name))

    (lsp-response-timeout . 10)

    (lsp-signature-auto-activate . '(:on-trigger-char :after-completion))

    lsp-completion-enable . nil)
#+end_src

*** lsp-ui                                      :languages:tools:

#+begin_src elisp
  (leaf lsp-ui
    :doc "UI integrations for lsp-mode."
    :url "https://github.com/emacs-lsp/lsp-ui"
    :tag "languages" "tools"
    :hook (prog-mode-hook text-mode-hook)
    :mode-hook
    (lsp-ui-sideline-mode 1)
    (flycheck-inline-mode -1)
    :preface
    (defun nasy/toggle-lsp-ui-imenu ()
      "Nasy toggle lsp ui imenu."
      (interactive)
      (if (get-buffer "*lsp-ui-imenu*")
          (kill-buffer "*lsp-ui-imenu*")
        (lsp-ui-imenu)))
    :bind
    ([remap imenu] . nasy/toggle-lsp-ui-imenu)
    :custom
    (lsp-ui-doc-enable . nil)
    ((lsp-ui-doc-include-signature
      lsp-ui-sideline-show-hover
      lsp-ui-sideline-show-symbol
      lsp-ui-sideline-show-diagnostics
      lsp-ui-sideline-show-code-actions
      lsp-ui-sideline-ignore-duplicate) . t)
    (lsp-ui-doc-position         . 'at-point)
    (lsp-ui-sideline-update-mode . 'point)
    :defer-config
    (require 'lsp-ui-peek))
#+end_src

*** lsp-treemacs                                      :languages:

#+begin_src elisp
  (leaf lsp-treemacs
    :doc "lsp-mode ❤ treemacs."
    :url "https://github.com/emacs-lsp/lsp-treemacs"
    :tag "languages"
    :custom
    (lsp-metals-treeview-show-when-views-received
     . t)
    (lsp-treemacs-theme . "doom-colors")
    :defer-config
    (lsp-treemacs-sync-mode t))
#+end_src

** C/C++/Object-C (Clangd or ccls)

#+include: "c.org"

** English

#+include: "english.org"

** Haskell

*** haskell-mode

#+begin_src elisp
  (leaf haskell-mode
    :mode-hook
    (subword-mode 1)
    (haskell-auto-insert-module-template)
    (haskell-collapse-mode)
    (interactive-haskell-mode)
    (gsetq-local tab-width 4)
    (nasy/tempo-haskell)
    :bind
    (:haskell-mode-map
     ("C-x a a" . align)
     ("C-c h"   . hoogle)
     ("C-o"     . open-line))
    :custom
    (haskell-mode-stylish-haskell-path            . "stylish-haskell")
    (haskell-indentation-layout-offset            . 4)
    (haskell-indentation-left-offset              . 4)
    (haskell-process-suggest-haskell-docs-imports . t)
    (haskell-process-suggest-remove-import-lines  . t)
    (haskell-process-auto-import-loaded-modules   . t)
    (haskell-process-log                          . t)
    (haskell-process-suggest-hayoo-imports        . t)
    (haskell-process-suggest-hoogle-imports       . t)
    (haskell-process-suggest-remove-import-lines  . t)
    (haskell-tags-on-save                         . t)
    ;; (haskell-completing-read-function             . 'helm--completing-read-default)
    (haskell-doc-show-global-types                . t)
    (haskell-svg-render-images                    . t)
    (haskell-doc-chop-off-context                 . nil)
    :init
    (unless (fboundp 'align-rules-list)
      (defvar align-rules-list nil))

    (add-to-list 'align-rules-list
                 '(haskell-types
                   (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-assignment
                   (regexp . "\\(\\s-+\\)=\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-arrows
                   (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-left-arrows
                   (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))

    (defun haskell-mode-generate-tags (&optional and-then-find-this-tag)
      "Generate tags using Hasktags.  This is synchronous function.

      If optional AND-THEN-FIND-THIS-TAG argument is present it is used
      with function `xref-find-definitions' after new table was
      generated."
      (interactive)
      (let* ((dir (haskell-cabal--find-tags-dir))
             (command (haskell-cabal--compose-hasktags-command dir)))
        (if (not command)
            (error "Unable to compose hasktags command")
          ;; I disabled the noisy shell command output.
          ;; The original is (shell-command command)
          (call-process-shell-command command nil "*Shell Command Output*" t)
          (haskell-mode-message-line "Tags generated.")
          (when and-then-find-this-tag
            (let ((tags-file-name dir))
              (xref-find-definitions and-then-find-this-tag))))))

    (define-minor-mode stack-exec-path-mode
      "If this is a stack project, set `exec-path' to the path \"stack exec\" would use."
      nil
      :lighter ""
      :global nil
      (if stack-exec-path-mode
          (when (and (executable-find "stack")
                    (locate-dominating-file default-directory "stack.yaml"))
            (setq-local
             exec-path
             (seq-uniq
              (append (list (concat (string-trim-right (shell-command-to-string "stack path --local-install-root")) "/bin"))
                      (parse-colon-path
                       (replace-regexp-in-string "[\r\n]+\\'" ""
                                                 (shell-command-to-string "stack path --bin-path"))))
              'string-equal)))
        (kill-local-variable 'exec-path)))
    :config
    (after-x 'page-break-lines
      (push 'haskell-mode page-break-lines-modes)))
#+end_src

*** lsp-haskell

#+begin_src elisp
  (leaf lsp-haskell
    :preface
    (defun start-lsp-haskell ()
      (require 'lsp)
      (require 'lsp-haskell)
      (lsp))
    :custom (lsp-haskell-formatting-provider . "brittany")
    :init
    (after-x 'company
      (nasy/add-company-backend 'haskell-mode '(company-capf
                                                company-files
                                                :with company-tabnine company-yasnippet)))
    :hook
    (haskell-mode-hook . start-lsp-haskell))
#+end_src

** HTML

#+begin_src elisp
  (leaf lsp-html
    :hook ((html-mode-hook . lsp-deferred)))
#+end_src

** JavaScript & TypeScript

#+begin_src elisp
  (leaf lsp-mode
    :hook ((javascript-mode-hook . lsp-deferred)))
#+end_src

** Lisp

*** cl-lib-highlight

#+begin_src elisp
  (leaf cl-lib-highlight
    :after lisp-mode
    :config
    (cl-lib-highlight-initialize))
#+end_src

*** elisp-def

 #+begin_src elisp
   (leaf elisp-def
     :hook (((emacs-lisp-mode-hook ielm-mode-hook) . elisp-def-mode)))
 #+end_src

*** Highlight-quoted

 #+begin_src elisp
   (leaf highlight-quoted
     :hook ((emacs-lisp-mode-hook . highlight-quoted-mode)))
 #+end_src

*** ipretty                                         :buffer:emacslisp:pprint:

 Interactive Emacs Lisp pretty-printing.

 ~ipretty.el~ provides interactive functions to pretty-print the result of an
 expression and a global mode ~ipretty-mode~ that advices ~eval-print-last-sexp~ to
 pretty print.

 https://framagit.org/steckerhalter/ipretty

 #+begin_src elisp
   (leaf ipretty
     :doc "Interactive Emacs Lisp pretty-printing"
     :url "https://framagit.org/steckerhalter/ipretty"
     :tag "buffer" "emacslisp" "pprint"
     :bind (("C-h C-j" . ipretty-last-sexp)
            ("C-h C-k" . ipretty-last-sexp-other-buffer)))
     :hook after-init-hook
 #+end_src

*** lisp-mode

 #+begin_src elisp
   (leaf lisp-mode
     :preface
     (defun eval-last-sexp-or-region (prefix)
       "Eval region from BEG to END if active, otherwise the last sexp."
       (interactive "P")
       (if (and (mark) (use-region-p))
           (eval-region (min (point) (mark)) (max (point) (mark)))
         (pp-eval-last-sexp prefix)))
     :bind
     (:emacs-lisp-mode-map
      ([remap eval-expression] . pp-eval-expression)
      ("C-x C-e"               . eval-last-sexp-or-region)))
 #+end_src

*** macrostep

 #+begin_src elisp
   (leaf macrostep
     :bind
     (:emacs-lisp-mode-map
      ("C-c e" . macrostep-expand)))
 #+end_src

*** parinfer-rust-mode

 #+begin_src elisp
   (leaf parinfer-rust-mode
     :custom
     `(parinfer-rust-library
       . ,(no-littering-expand-var-file-name "parinfer-rust/parinfer-rust-darwin.so"))
     (parinfer-rust-auto-download . t)
     :hook `(,lisp-modes-hooks))
 #+end_src

** Markdown

#+begin_src elisp
  (leaf markdown-mode
    :mode ("INSTALL\\'"
           "CONTRIBUTORS\\'"
           "LICENSE\\'"
           "README\\'"
           "\\.markdown\\'"
           "\\.md\\'"))
#+end_src

** Nix

#+begin_src elisp
  (leaf nix
    :disabled t
    :init
    (defun start-nix-lsp ()
      (after-x 'lsp-mode
        (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
        (lsp-register-client
         (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                          :major-modes '(nix-mode)
                          :server-id 'nix)))
      (lsp))
    :hook (nix-mode-hook . start-nix-lsp))
#+end_src

** Python

*** Autoloads

#+begin_src elisp
  ;;;###autoload
  (defcustom nasy*python-buffer "vterm"
    "Nasy Python Buffer"
    :group 'python-mode
    :type 'string)

  ;;;###autoload
  (defun nasy/python-send-buffer ()
    "Send current buffer to the running python process."
    (interactive)
    (let ((proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (save-buffer)
      (comint-simple-send proc
                          (concat "%run " (format "%s" (buffer-file-name))))
      (pop-to-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-region (begin end)
    "Evaluate the code in region from BEGIN to END in the python repl.
  if the region is unset, the current line will be used."
    (interactive "r")
    (unless (use-region-p)
      (setq begin (line-beginning-position)
            end (line-end-position)))
    (let* ((text (buffer-substring-no-properties begin end))
           (proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (comint-simple-send proc text)
      (display-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-defun (&optional arg)
    "Send the current defun to inferior Python process.
  When ARG is non-nil do not include decorators."
    (interactive (list current-prefix-arg t))
    (nasy:python-send-region
     (progn
       (end-of-line 1)
       (while (and (or (python-nav-beginning-of-defun)
                       (beginning-of-line 1))
                   (> (current-indentation) 0)))
       (when (not arg)
         (while (and (forward-line -1)
                     (looking-at (python-rx decorator))))
         (forward-line 1))
       (point-marker)
       (progn
         (or (python-nav-end-of-defun)
             (end-of-line 1))
         (point-marker)))))

  ;;;###autoload
  (defun nasy/python-switch-to-shell ()
    "Switch to inferior Python process buffer."
    (interactive "p")
    (let ((proc (get-buffer-process nasy:python-buffer)))
      (unless proc
        (error "No process found"))
      (pop-to-buffer nasy*python-buffer)))
#+end_src

*** config

#+begin_src elisp
  (general-define-key
   :prefix "C-c"
   :keymaps 'python-mode-map
   "C-b" 'nasy/python-send-buffer
   "C-r" 'nasy/python-send-region
   "C-c" 'nasy/python-send-defun
   "C-z" 'nasy/python-switch-to-shell)
  (general-define-key
   :keymaps 'python-mode-map
   "<S-return>" 'nasy/python-send-region)


  (defun python-flycheck-setup ()
    "Setup python checker."
    ;; flake8 already have python-mypy and python-pylint as the next checker
    ;; (flycheck-add-next-checker 'python-flake8    'python-mypy)))
    (flycheck-disable-checker 'python-pylint)
    (flycheck-remove-next-checker 'python-flake8 'python-pylint))

  (leaf python
    :mode-hook
    (nasy/tempo-python))
#+end_src

*** elpy

#+begin_src elisp
  (leaf elpy
    :init
    ;; (add-to-list 'exec-path "/Users/Nasy/Library/Python/3.8/bin")
    (when (eq *py-module* 'elpy)
      (add-to-list 'elpy-modules 'elpy-module-autodoc)
      (add-to-list 'elpy-modules 'elpy-module-eldoc))
    :custom
    (elpy-rpc-virtualenv-path . 'current)
    (elpy-modules             . '(elpy-module-company
                                  elpy-module-folding
                                  elpy-module-yasnippet))
    :config
    (when (eq *py-module* 'elpy)
      (after-x 'company
        (nasy/add-company-backend 'python-mode '(elpy-company-backend
                                                 company-files
                                                 :with company-tabnine company-yasnippet))))
    :advice
    (:before python-mode elpy-enable)
    (:after elpy-module-folding (lambda (&rest _)
                                  (define-key elpy-mode-map (kbd "<mouse-1>") nil))))
#+end_src

*** lsp-pyright

#+begin_src elisp
  (leaf lsp-pyright
    :if (eq *py-module* 'pyright)
    :after elpy
    :preface
    (defun python-setup-lsp-flycheck ()
      "Setup python lsp flycheck."
      (if lsp-diagnostics-mode
          (progn
            (flycheck-add-next-checker 'lsp 'python-flake8)
            (flycheck-inline-mode -1))
        (progn
          (flycheck-remove-next-checker 'lsp 'python-flake8)
          (flycheck-inline-mode 1))))
    (defun start-lsp-pyright ()
      "Start lsp pyright."
      (require 'lsp-pyright)
      (lsp)
      (gsetq elpy-modules (remove 'elpy-module-autodoc elpy-modules))
      (gsetq elpy-modules (remove 'elpy-module-eldoc   elpy-modules))
      (python-flycheck-setup))
    :hook
    (python-mode-hook          . start-lsp-pyright)
    (lsp-diagnostics-mode-hook . python-setup-lsp-flycheck)
    :config
    (when (eq *py-module* 'pyright)
      (after-x 'company
        (nasy/add-company-backend 'python-mode
          '(company-capf
            elpy-company-backend
            company-files
            :with company-tabnine company-yasnippet)))))
#+end_src

*** isort

#+begin_src elisp
  (leaf nasy-python-isort
    :commands python-isort-buffer python-isort-region python-isort-on-save-mode)
#+end_src

#+begin_src elisp :tangle (concat temporary-file-directory "nasy-python-isort.el")
  ;;; nasy-python-isort.el --- Utility to sort Python imports -*- lexical-binding: t; -*-

  (require 'reformatter)

  (defcustom python-isort-command "isort"
    "Name of the `isort` executable."
    :group 'nasy
    :type 'string)

  (defvar python-isort--base-args '("--quiet" "--atomic")
    "Base arguments to pass to isort.")

  (defcustom python-isort-extra-args `("--sp" ,(expand-file-name "~/.config/isort.cfg"))
    "Extra arguments to pass to isort."
    :group 'nasy
    :type '(repeat string))

  ;;;###autoload (autoload 'python-isort-buffer "nasy-python-isort" nil t)
  ;;;###autoload (autoload 'python-isort-region "nasy-python-isort" nil t)
  ;;;###autoload (autoload 'python-isort-on-save-mode "nasy-python-isort" nil t)
  (reformatter-define python-isort
    :program python-isort-command
    :args (python-isort--make-args beg end)
    :lighter " isort"
    :group 'python-isort)

  (defun python-isort--make-args (beg end)
    "Helper to build the argument list for isort for span BEG to END."
    (append python-isort--base-args
            python-isort-extra-args
            '("-")))

  (provide 'nasy-python-isort)
  ;;; nasy-python-isort.el ends here
#+end_src

** restclient.el

HTTP REST client tool for emacs

https://github.com/pashky/restclient.el

#+begin_src elisp
  (leaf restclient
    :init
    (after-x 'company
      (nasy/add-company-backend
        'restclient-mode
        '(company-restclient company-files))))
#+end_src

** Rust

Include rust-mode, rls and Cargo.

# #+begin_src elisp
  (when *rust*
    (use-package rust-mode
      :defer t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
             (rust-mode . lsp-deferred))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo)))))

    (use-package cargo
      :after rust-mode
      :hook ((toml-mode . cargo-minor-mode)
             (rust-mode . cargo-minor-mode))))
#+end_src

** Text (lsp-grammarly)

#+begin_src elisp
  (leaf lsp-grammarly
    :disabled t
    :init (defun start-lsp-grammarly ()
            (interactive)
            (require 'lsp-grammarly)
            (lsp))
    :custom
    `(lsp-grammarly-server-path
      . ,(or (executable-find "grammarly-ls")
            (executable-find "unofficial-grammarly-language-server-2")))
    (lsp-grammarly-user-words . '("Nasy"))
    :hook (text-mode-hook . start-lsp-grammarly))
#+end_src

** Yaml

#+begin_src elisp
  (leaf lsp-yaml
    :hook ((yaml-mode-hook . lsp-deferred)))
#+end_src

* Footer                                                 :noexport:

#+begin_src elisp
  (provide 'nasy-langs)
  ;;; nasy-langs.el ends here
#+end_src
