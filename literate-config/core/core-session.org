#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-core-session.el")

* Header                                                                        :noexport:

#+begin_src elisp
  ;;; nasy-core-session.el --- Nasy's Emacs Configuration core-session file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Emacs Configuration core file.

  ;;; Code:
#+end_src

* Packages

#+begin_src elisp
  (nasy/s-u-p session)
#+end_src

* Autoloads

#+begin_src elisp
  (defvar desktop-base-file-name)
  (defvar desktop-dirname)
  (defvar desktop-restore-eager)
  (defvar desktop-file-modtime)

  ;;
  ;;; Helpers

  ;;;###autoload
  (defun nasy-session-file (&optional name)
    "TODO"
    (cond ((require 'persp-mode nil t)
           (expand-file-name (or name persp-auto-save-fname) persp-save-dir))
          ((require 'desktop nil t)
           (if name
               (expand-file-name name (file-name-directory (desktop-full-file-name)))
             (desktop-full-file-name)))
          ((error "No session backend available"))))

  ;;;###autoload
  (defun nasy-save-session (&optional file)
    "TODO"
    (setq file (expand-file-name (or file (nasy-session-file))))
    (cond ((require 'persp-mode nil t)
           (unless persp-mode (persp-mode +1))
           (setq persp-auto-save-opt 0)
           (persp-save-state-to-file file))
          ((and (require 'frameset nil t)
                (require 'restart-emacs nil t))
           (let ((frameset-filter-alist (append '((client . restart-emacs--record-tty-file))
                                                frameset-filter-alist))
                 (desktop-base-file-name (file-name-nondirectory file))
                 (desktop-dirname (file-name-directory file))
                 (desktop-restore-eager t)
                 desktop-file-modtime)
             (make-directory desktop-dirname t)
             ;; Prevents confirmation prompts
             (let ((desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name)))))
               (desktop-save desktop-dirname t))))
          ((error "No session backend to save session with"))))

  ;;;###autoload
  (defun nasy-load-session (&optional file)
    "TODO"
    (setq file (expand-file-name (or file (nasy-session-file))))
    (message "Attempting to load %s" file)
    (cond ((not (file-readable-p file))
           (message "No session file at %S to read from" file))
          ((require 'persp-mode nil t)
           (unless persp-mode
             (persp-mode +1))
           (let ((allowed (persp-list-persp-names-in-file file)))
             (cl-loop for name being the hash-keys of *persp-hash*
                      unless (member name allowed)
                      do (persp-kill name))
             (persp-load-state-from-file file)))
          ((and (require 'frameset nil t)
                (require 'restart-emacs nil t))
           (restart-emacs--restore-frames-using-desktop file))
          ((error "No session backend to load session with"))))


  ;;
  ;;; Command line switch

  ;;;###autoload
  (defun nasy-restore-session-handler (&rest _)
    "TODO"
    (add-hook 'window-setup-hook #'nasy-load-session 'append))

  ;;;###autoload
  (add-to-list 'command-switch-alist (cons "--restore" #'nasy-restore-session-handler))


  ;;
  ;;; Commands

  ;;;###autoload
  (defun nasy/quickload-session ()
    "TODO"
    (interactive)
    (message "Restoring session...")
    (nasy-load-session)
    (message "Session restored. Welcome back."))

  ;;;###autoload
  (defun nasy/quicksave-session ()
    "TODO"
    (interactive)
    (message "Saving session")
    (nasy-save-session)
    (message "Saving session...DONE"))

  ;;;###autoload
  (defun nasy/load-session (file)
    "TODO"
    (interactive
     (let ((session-file (nasy-session-file)))
       (list (or (read-file-name "Session to restore: "
                                 (file-name-directory session-file)
                                 (file-name-nondirectory session-file)
                                 t)
                 (user-error "No session selected. Aborting")))))
    (unless file
      (error "No session file selected"))
    (message "Loading '%s' session" file)
    (nasy-load-session file)
    (message "Session restored. Welcome back."))

  ;;;###autoload
  (defun nasy/save-session (file)
    "TODO"
    (interactive
     (let ((session-file (nasy-session-file)))
       (list (or (read-file-name "Save session to: "
                                 (file-name-directory session-file)
                                 (file-name-nondirectory session-file))
                 (user-error "No session selected. Aborting")))))
    (unless file
      (error "No session file selected"))
    (message "Saving '%s' session" file)
    (nasy-save-session file))

  ;;;###autoload
  (defalias 'nasy/restart #'restart-emacs)

  ;;;###autoload
  (defun nasy/restart-and-restore (&optional debug)
    "TODO"
    (interactive "P")
    (setq nasy-autosave-session nil)
    (nasy/quicksave-session)
    (restart-emacs
     (append (if debug (list "--debug-init"))
             (when (boundp 'chemacs-current-emacs-profile)
               (list "--with-profile" chemacs-current-emacs-profile))
             (list "--restore"))))
#+end_src
