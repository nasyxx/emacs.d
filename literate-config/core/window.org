#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Window
#+end_src

* Switch-Window

Offer a *visual* way to choose a window to switch to.

https://github.com/dimitri/switch-window

#+begin_src elisp
  (leaf switch-window
    :doc "Offer a *visual* way to choose a window to switch to."
    :url "https://github.com/dimitri/switch-window"
    :bind
    ("C-c o" . switch-window)
    ("C-c 1" . toggle-delete-other-windows)
    ("C-c 2" . split-window-v)
    ("C-c 3" . split-window-h)
    ("C-c |" . split-window-horizontally-instead)
    ("C-c _" . split-window-vertically-instead)
    ("C-c x" . nasy/split-window)
    ("M-o"   . transient-dwim--switch-window)
    :custom
    (switch-window-shortcut-style . 'alphabet)
    (switch-window-timeout        . nil)
    :transient
    (transient-dwim--switch-window
     ()
     "Transient-dwim for `switch-window'."
     [["Switch Window"
       ("o" "Switch Window" switch-window)]])
    :config
    ;; When splitting window, show (other-buffer) in the new window
    (defun split-window-func-with-other-buffer (split-function)
      "Split window with `SPLIT-FUNCTION'."
      (lambda (&optional arg)
        "Split this window and switch to the new window unless ARG is provided."
        (interactive "P")
        (funcall split-function)
        (let ((target-window (next-window)))
          (set-window-buffer target-window (other-buffer))
          (unless arg
            (select-window target-window)))))

    (defun split-window-v ()
      (split-window-func-with-other-buffer 'split-window-vertically))

    (defun split-window-h ()
      (split-window-func-with-other-buffer 'split-window-horizontally))

    (defun toggle-delete-other-windows ()
      "Delete other windows in frame if any, or restore previous window config."
      (interactive)
      (if (and winner-mode
               (equal (selected-window) (next-window)))
          (winner-undo)
        (delete-other-windows)))

    (defun split-window-horizontally-instead ()
      "Kill any other windows and re-split such that the current window is on the top half of the frame."
      (interactive)
      (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
        (delete-other-windows)
        (split-window-horizontally)
        (when other-buffer
          (set-window-buffer (next-window) other-buffer))))

    (defun split-window-vertically-instead ()
      "Kill any other windows and re-split such that the current window is on the left half of the frame."
      (interactive)
      (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
        (delete-other-windows)
        (split-window-vertically)
        (when other-buffer
          (set-window-buffer (next-window) other-buffer))))

    ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
    (defun nasy/split-window()
      "Split the window to see the most recent buffer in the other window.
    Call a second time to restore the original window configuration."
      (interactive)
      (if (eq last-command 'nasy-split-window)
          (progn
            (jump-to-register :nasy-split-window)
            (setq this-command 'nasy-unsplit-window))
        (window-configuration-to-register :nasy/split-window)
        (switch-to-buffer-other-window nil))))
#+end_src
