#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-bootstrap.el")

#+begin_src elisp :exports none
  ;;; nasy-bootstrap.el --- Nasy's emacs.d init bootstrap file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's emacs.d init bootstrap file.

  ;;; Code:
#+end_src

* Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+begin_src elisp
  (setq-default debug-on-error         t
                message-log-max        t
                load-prefer-newer      t
                ad-redefinition-action 'accept
                gc-cons-threshold      most-positive-fixnum)
#+end_src

If this os is macOS?

#+begin_src elisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

* Packages Manager

I use [[https://github.com/raxod502/straight.el][straight.el]] as my packages manager.

At the same time, I use [[https://github.com/conao3/leaf.el][leaf.el]] to manage packages' loading.

#+begin_src elisp
  (setq straight-recipes-gnu-elpa-use-mirror    t
        straight-recipes-emacsmirror-use-mirror t
        straight-repository-branch              "master"
        straight-vc-git-default-clone-depth     1
        straight-enable-use-package-integration nil
        straight-check-for-modifications        '(find-when-checking)
        straight-fix-flycheck                   t)

  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (defmacro nasy/s-u-p (&rest packages)
    "Straight use multiple PACKAGES.

  Usage:

      \(nasy/s-u-p nil t 'avy avx *eldoc-use* (avy :type git)
                   (:when nil ax3) (:when t 'axx ax2) (:when t axy 'axy2))

  to

      \(progn
         (straight-use-package 'avy)
         (straight-use-package 'avx)
         (if *eldoc-use*
             (progn
               (straight-use-package *eldoc-use*)))
         (straight-use-package
          '(avy :type git))
         nil
         (progn
           (straight-use-package 'axx)
           (straight-use-package 'ax2))
         (progn
           (straight-use-package 'axy)
           (straight-use-package 'axy2)))"
    (declare (indent defun))
    `(progn
       ,@(cl-loop for package in packages
                  when (and package
                           (not (eq package t)))
                  collect
                  (cond ((and (symbolp package)
                             (or (not (boundp package))
                                (fboundp package)))
                         `(straight-use-package ',package))
                        ((symbolp package)
                         `(when ,package
                            (straight-use-package ,package)))
                        ((consp package)
                         (let ((fst (car package))
                               (rst (cdr package)))
                           (cond ((eq :when fst)
                                  `(when ,(car rst)
                                     (nasy/s-u-p ,@(cdr rst))))
                                 ((eq 'quote fst)
                                  `(straight-use-package ,package))
                                 (t `(straight-use-package ',package)))))
                        (t nil)))))


  (nasy/s-u-p leaf leaf-keywords)
  (leaf-keywords-init)

  ;; Feature `straight-x' from package `straight' provides
  ;; experimental/unstable extensions to straight.el which are not yet
  ;; ready for official inclusion.
  (leaf straight-x
    ;; Add an autoload for this extremely useful command.
    :commands (straight-x-fetch-all))
#+end_src

* Load Path

Literate config will generate emacslisp files to ~config~ folder.  However, we use
straight.el to handle them, we do not need to add them to ~load-path~ manually.

#+begin_src elisp
  (defmacro nasy/local-repo (repo &rest body)
    "Nasy load local REPO."
    (let ((n-repo (format "nasy-%s" (symbol-name repo))))
      `(progn
         (straight-use-package
          '(,(intern n-repo)
            ,@body
            :local-repo ,(expand-file-name
                          (format "config/%s" (symbol-name repo))
                          user-emacs-directory))))))

  (defmacro nasy/extra-repo (repo &rest body)
    "Nasy extra local site-lisp REPO."
    `(progn
       (straight-use-package
        '(,repo
          ,@body
          :local-repo ,(expand-file-name
                        (format "extra/site-lisp/%s" (symbol-name repo))
                        user-emacs-directory)))))
#+end_src

Also, there is a custom directory.

#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "custom" user-emacs-directory))
  (require 'user-config-example)
  (require 'user-config nil t)
#+end_src

* Benchmark

** Benchmark-timer

#+begin_src elisp
  (defmacro nasy/timer (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))
#+end_src

** Benchmark-init

This is a simple benchmark of calls to Emacs require and load functions. It can
be used to keep track of where time is being spent during Emacs startup in order
to optimize startup times.

https://github.com/dholm/benchmark-init-el

#+begin_src elisp
  (straight-use-package
   '(benchmark-init :type git :host github :repo "nasyxx/benchmark-init-el"))
  (leaf benchmark-init
    :doc "This is a simple benchmark of calls to Emacs require and load functions."
    :url "https://github.com/dholm/benchmark-init-el"
    :hook ((after-init-hook . benchmark-init/deactivate))
    :init (benchmark-init/activate))
#+end_src

* Garbage Collection

Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection.

https://gitlab.com/koral/gcmh

#+begin_src elisp
  (straight-use-package 'gcmh)
  (leaf gcmh
    :disabled nil
    :doc "Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection."
    :url "https://gitlab.com/koral/gcmh"
    :hook (after-init-hook . gcmh-mode)
    :custom
    (garbage-collection-messages . t)
    (gcmh-verbose                . t)
    (gcmh-lows-cons-threshold    . #x4000000)  ;; 64MB
    (gcmh-high-cons-threshold    . #x10000000) ;; 256MB
    (gcmh-idle-delay             . 360))
#+end_src

#+begin_src elisp
  (leaf emacs
    :disabled t
    :preface
    (defun nasy/upper-gc ()
      (setq gc-cons-threshold #x1000000))
    (defun nasy/lower-gc ()
      (run-at-time 1 nil (lambda () (setq gc-cons-threshold #x800000))))
    (defun nasy/gc ()
      (message "Garbage Collector has run for %.06fsec"
               (nasy/timer (garbage-collect))))
    ;; :hook
    ;; (minibuffer-setup-hook . nasy/upper-gc)
    ;; (minibuffer-exit-hook  . nasy/lower-gc)
    :advice
    (:after after-focus-change-function (lambda (&rest _)
                                          (unless (frame-focus-state)
                                            (nasy/gc))))
    :custom
    (garbage-collection-messages . nil)
    :config
    (run-with-idle-timer 360 t
                         #'nasy/gc))
#+end_src

* No Littering

https://github.com/emacscollective/no-littering

#+begin_src elisp
  (straight-use-package 'no-littering)
  (require 'no-littering)
#+end_src

* Load Org

When using straight.el, the org version is needed to custom set.

#+begin_src elisp
  (straight-use-package 'org-plus-contrib)
#+end_src

* Footer                                                 :noexport:

#+begin_src elisp :exports none
  (provide 'nasy-bootstrap)
  ;;; nasy-bootstrap.el ends here
#+end_src
