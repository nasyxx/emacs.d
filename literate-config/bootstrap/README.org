#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-bootstrap.el")

#+begin_src elisp :exports none
  ;;; nasy-bootstrap.el --- Nasy's emacs.d init bootstrap file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's emacs.d init bootstrap file.

  ;;; Code:
#+end_src

* Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+begin_src elisp
  (setq-default debug-on-error         t
                message-log-max        t
                load-prefer-newer      t
                ad-redefinition-action 'accept
                gc-cons-threshold      most-positive-fixnum)
#+end_src

If this os is macOS?

#+begin_src elisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

* Packages Manager

I use [[https://github.com/raxod502/straight.el][straight.el]] as my packages manager.

At the same time, I use [[https://github.com/conao3/leaf.el][leaf.el]] to manage packages' loading.

#+begin_src elisp
  (setq straight-recipes-gnu-elpa-use-mirror    t
        straight-recipes-emacsmirror-use-mirror t
        straight-repository-branch              "master"
        straight-vc-git-default-clone-depth     1
        straight-enable-use-package-integration nil
        straight-check-for-modifications        '(find-when-checking)
        straight-fix-flycheck                   t)

  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'leaf)
  (straight-use-package 'leaf-keywords)
  (leaf-keywords-init)

  (defun nasy/-s-u-p (package)
    "Handle special PACKAGE var."
    (if (boundp package)
        (when (eval package)
          (straight-use-package (eval package)))
      (straight-use-package package)))

  (defun nasy/s-u-p (&rest packages-sets)
    "Straight use multiple PACKAGES-SETS."
    (cl-loop for packages-set in packages-sets
             when (not (null packages-set))
             do
             (cl-loop for package in packages-set
                      do
                      (cond ((symbolp package)
                             (nasy/-s-u-p package))
                            ((listp package)
                             (dolist (p package)
                               (nasy/-s-u-p p)))
                            (t (error "???"))))))
#+end_src

* Load Packages

** Load Path

Literate config will generate emacslisp files to ~config~ folder.  However, we use
straight.el to handle them, we do not need to add them to ~load-path~ manually.

#+begin_src elisp
  (defmacro nasy/local-repo (repo &rest body)
    "Nasy load local REPO."
    (let ((n-repo (format "nasy-%s" (symbol-name repo))))
      `(progn
         (straight-use-package
          '(,(intern n-repo)
            ,@body
            :local-repo ,(expand-file-name
                          (format "config/%s" (symbol-name repo))
                          user-emacs-directory))))))

  (defmacro nasy/extra-repo (repo &rest body)
    "Nasy extra local site-lisp REPO."
    `(progn
       (straight-use-package
        '(,repo
          ,@body
          :local-repo ,(expand-file-name
                        (format "extra/site-lisp/%s" (symbol-name repo))
                        user-emacs-directory)))))
#+end_src

** Load Custom

Also, there is a custom directory.

#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "custom" user-emacs-directory))
  (require 'user-config-example)
  (require 'user-config nil t)
#+end_src

** Packages

*** Bootstrap

When using straight.el, the org version is needed to custom set.

#+begin_src elisp
  (defvar nasy-bootstrap-p
    '(benchmark-init
      gcmh
      no-littering
      org-plus-contrib)
    "Bootstrap packages.")
#+end_src

*** Core

#+begin_src elisp
  (defvar nasy-core-p
    '(async
      default-text-scale
      diminish
      exec-path-from-shell
      general
      noflet
      session
      transient)
    "Cores packages.")
#+end_src

*** Editor

#+begin_src elisp
  (defvar nasy-editor-p
    `(alert
      cheat-sh
      dash
      diff-hl
      dired-hacks
      easy-kill
      ,*eldoc-use*
      spatial-navigate
      explain-pause-mode
      expand-region
      ;; fill
      unfill
      visual-fill-column
      ;; highlight
      color-identifiers-mode
      ;; hl-line  builtin
      ,(when *highlight-indent-guides* 'highlight-indent-guides)
      rainbow-mode
      ;; helm
      ;; helm

      helpful
      htmlize
      indent-tools
      ;; ivy
      all-the-icons-ivy-rich
      counsel
      counsel-projectile
      ivy
      ivy-rich
      ivy-xref
      ,(when *ivy-posframe* 'ivy-posframe)
      ,(when *ivy-prescient* '(prescient ivy-prescient))

      list-unicode-display
      mixed-pitch
      mmm-mode
      multiple-cursors
      page-break-lines
      ;; paren
      smartparens
      rainbow-delimiters

      point-history
      prescient
      pretty-mode
      quick-peek
      ;; selectrum
      ;; selectrum
      ;; selectrum-prescient
      ;; embark
      ;; consult
      ;; consult-selectrum
      ;; consult-flycheck
      ;; marginalia

      symbol-overlay
      switch-window
      ;; treemacs
      treemacs
      treemacs-icons-dired
      treemacs-magit
      treemacs-projectile
      ;; tree-sitter
      tsc
      tree-sitter
      tree-sitter-langs
      ;;version-control
      abridge-diff
      forge
      gist
      git-blamed
      git-gutter
      git-messenger
      git-modes
      git-timemachine
      magit
      magit-org-todos
      magit-todos

      vundo
      wgrep
      which-key
      whitespace-cleanup-mode)
    "Editor packages.")
#+end_src

*** Tools

#+begin_src elisp
  (defvar nasy-tools-p
    `(all-the-icons
      anzu
      avy
      beginend
      carbon-now-sh

      ;; company
      company
      ,(when *c-box* 'company-box)
      company-dict
      company-flx
      company-math
      company-prescient
      company-quickhelp
      company-restclient
      company-tabnine

      ,(when (version< emacs-version "27") 'emojify)
      ,(when (version< emacs-version "27") 'emojify)

      ;; fill column
      unfill
      visual-fill-column

      find-file-in-project
      ,(when *is-a-mac* 'grab-mac-link)
      ;; flycheck
      flycheck
      flycheck-package
      ,(when *flycheck-inline* '(flycheck-inline quick-peek))
      ;; ibuffer
      ibuffer-vc
      all-the-icons-ibuffer

      ;; imenu-list
      ob-restclient
      restclient
      thingopt
      vterm
      vterm-toggle
      wakatime-mode

      yasnippet
      license-snippets
      yasnippet-snippets)
    "Tool packages.")
#+end_src

*** Languages

#+begin_src elisp
  (defvar nasy-langs-p
    `(;; lisps
      cl-lib-highlight
      elisp-def
      highlight-quoted
      ipretty
      macrostep
      parinfer-rust-mode

      ;; lsp-mode
      dap-mode
      lsp-mode
      lsp-treemacs
      lsp-ui
      ;; lsp-grammarly

      ;; haskell
      haskell-mode
      haskell-snippets
      lsp-haskell

      ;; nix
      nix-mode
      nix-update
      nix-buffer
      nixpkgs-fmt
      nixos-options
      company-nixos-options

      ;; python
      elpy
      lsp-pyright

      company-restclient
      elvish-mode
      fish-completion
      fish-mode
      markdown-mode
      ob-elvish
      ob-restclient
      pandoc-mode
      reformatter
      restclient
      toml-mode
      yaml-mode
      ,(when *rust* '(cargo rust-mode)))
    "Languages packages.")
#+end_src

*** Org Mode

#+begin_src elisp
  (defvar nasy-org-p
    '(org-plus-contrib

      org-appear
      org-cliplink
      org-pdfview
      org-roam
      company-org-roam
      org-superstar
      org-wc
      toc-org))
#+end_src

*** UI

#+begin_src elisp
  (defvar nasy-ui-p
    '(dashboard
      doom-themes)
    "UI packages.")

#+end_src

*** App

#+begin_src elisp
  (defvar nasy-app-p
    '(rime telega)
    "App packages.")
#+end_src

*** Extra

#+begin_src elisp
  (straight-register-package
   '(point-history :type git
                   :host github
                   :repo "blue0513/point-history"))

  (straight-register-package
   '(vundo :type git
           :host github
           :repo "casouri/vundo"))

  (straight-register-package
   '(parinfer-rust-mode :type git
                        :host github
                        :repo "justinbarclay/parinfer-rust-mode"))

  (straight-register-package
   '(keytar :type git
            :host github
            :repo "emacs-grammarly/keytar"))
#+end_src

** Load Bootstrap Packages

#+begin_src elisp
  (nasy/s-u-p nasy-bootstrap-p)
#+end_src

* Benchmark

** Benchmark-timer

#+begin_src elisp
  (defmacro nasy/timer (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))
#+end_src

** Benchmark-init

This is a simple benchmark of calls to Emacs require and load functions. It can
be used to keep track of where time is being spent during Emacs startup in order
to optimize startup times.

https://github.com/dholm/benchmark-init-el

#+begin_src elisp
   ;; '(benchmark-init :type git :host github :repo "nasyxx/benchmark-init-el"))
  (cl-letf (((symbol-function 'define-obsolete-function-alias) #'defalias))
    (leaf benchmark-init
	  :doc "This is a simple benchmark of calls to Emacs require and load functions."
	  :url "https://github.com/dholm/benchmark-init-el"
	  :hook ((after-init-hook . benchmark-init/deactivate))
	  :init (benchmark-init/activate)))
#+end_src

* Garbage Collection

Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection.

https://gitlab.com/koral/gcmh

#+begin_src elisp
  (leaf gcmh
    :disabled nil
    :doc "Use GCMH --  the Garbage Collector Magic Hack -- to adjust garbage collection."
    :url "https://gitlab.com/koral/gcmh"
    :hook (after-init-hook . gcmh-mode)
    :custom
    (garbage-collection-messages . t)
    (gcmh-verbose                . t)
    (gcmh-lows-cons-threshold    . #x4000000)  ;; 64MB
    (gcmh-high-cons-threshold    . #x10000000) ;; 256MB
    (gcmh-idle-delay             . 360))
#+end_src

#+begin_src elisp
  (leaf emacs
    :disabled t
    :preface
    (defun nasy/upper-gc ()
      (setq gc-cons-threshold #x1000000))
    (defun nasy/lower-gc ()
      (run-at-time 1 nil (lambda () (setq gc-cons-threshold #x800000))))
    (defun nasy/gc ()
      (message "Garbage Collector has run for %.06fsec"
               (nasy/timer (garbage-collect))))
    ;; :hook
    ;; (minibuffer-setup-hook . nasy/upper-gc)
    ;; (minibuffer-exit-hook  . nasy/lower-gc)
    :advice
    (:after after-focus-change-function (lambda (&rest _)
                                          (unless (frame-focus-state)
                                            (nasy/gc))))
    :custom
    (garbage-collection-messages . nil)
    :config
    (run-with-idle-timer 360 t
                         #'nasy/gc))
#+end_src

* No Littering

https://github.com/emacscollective/no-littering

#+begin_src elisp
  (require 'no-littering)
#+end_src

* Footer                                                 :noexport:

#+begin_src elisp :exports none
  (provide 'nasy-bootstrap)
  ;;; nasy-bootstrap.el ends here
#+end_src
